Constant Story "The Uninvited Epic of Augustus Interruptus";
Constant Headline "^Written and directed by Joshua Wilson^";
Array UUID_ARRAY static string "UUID://b72c87a5-f92e-4f07-b3e7-ba4b5243611a//";
Release 1;

Attribute custom_listing;
Global DEATH_MENTION_UNDO;
Constant MAX_SCORE = 1;
Global TEST_MODE = true;

Constant MAX_CARRIED = 2;
Include "vorple.h";
Include "uoai-parser.h";
Include "uoai-verblib.h";
Include "infglk.h";
Include "markup.h";
Include "uoai-vorple-multimedia.h";
Include "vorple-hyperlinks.h";
Include "vorple-command-prompt-control.h";
Include "vorple-screen-effects.h";

[ PrintRank;
];

[ DeathMessage;
      if (deadflag == 3)
          print "But you still have failed.";
];

[ ChooseObjects obj code
  retval;
  obj = obj;          ! Avoid a compiler warning
  switch (code) {
      0:              ! Parser is excluding obj from ALL
          ;           ! ... accept parser's decision
      1:              ! Parser is including obj in ALL
          if (action_to_be == ##Take || action_to_be == ##Drop || action_to_be == ##Wear) retval = 2;
                      ! ... force exclusion if TAKE; accept otherwise
      2:              ! Parser is asking for 'appropriateness' hint
          ;           ! ... but we don't provide one
      }
  return retval;
];

[ AfterRestore;
  ClearNarration();
  VorpleStopAudio();
  System.SyncBrowserAudioExtension();
  QueueBinOutput("na_msg_restoresuccessful");
  print "Restore successful!^";
  System.FlushBinOrTTSIfNarrationEnabled();
  System.RestartWeatherLoop();
  System.RestartMusicLoop();
  System.previousExaminedItem = 0;
  System.previouslyLooked = 0;
];

[ ClearNarration;
  VorpleExecuteJavaScriptCommand("CancelTTS();");
  VorpleStopMusic();
  VorpleClearPlaylist();
];

[ CompareStrings bufA bufB
    i;
    if (bufA-->0 ~= bufB-->0) rfalse;
    for (i=0 : i<bufA-->0 : i++) {
        if ((bufA->(i+WORDSIZE)) ~= (bufB->(i+WORDSIZE))) rfalse;
      }
    rtrue;
];

Constant WORD_NEXTTOHIGHBIT = $40000000;
[ SquareRoot num
  op res one;
  op = num;
  if (num < 0) { return -1; }
  ! "one" starts at the highest power of four <= the argument.
  for (one = WORD_NEXTTOHIGHBIT: one > op: one = one/4) ;
  while (one ~= 0) {
  !print "Round: op = ", op, " res = ", res, ", res**2 = ", res*res, " one = ", one, "^";
  if (op >= res + one) {
  op = op - res - one;
  res = res + one*2;
  }
  res = res/2;
  one = one/4;
  }
  !print "Res is ", res, "^";
  return res;
];


[ StringToLower bufA
    i;
    for (i=0 : i<bufA-->0 : i++) {
        if ((bufA->(i+WORDSIZE)) >= 'A' && (bufA->(i+WORDSIZE)) <= 'Z') {
          (bufA->(i+WORDSIZE)) = (bufA->(i+WORDSIZE))-('A' - 'a');
        }
      }
    rtrue;
];

!FIXME undo can cause currentCmdSupportsPlayback field to be 0 or 1, resulting in TTS playback of room name.
[ GamePreRoutine tmp;
  System.currentCmdSupportsPlayback = 1;
  if (action == ##Examine) {
    if (System.previousExaminedItem)
      if (System.previousExaminedItem == noun)
        if (noun ofclass HyperLinkedObject) {
          System.previousExaminedItem = 0;
          action = ##Interact;
        }
        else {}
      else
        System.previousExaminedItem = noun;
    else
      System.previousExaminedItem = noun;
  }
  switch (action) {
    ##Look:
    ##Examine:
    ##Search:
    ##UOAIInv:
    ##Go:
    ##Open:
    ##Close:
    default:
      System.currentCmdSupportsPlayback = 0;
  }
  return false;
];

[ CopyStringTo bufA bufB
    j;
    for (j=0 : j<bufA-->0 : j++) {
      bufB-->j = bufA-->j;
    }
    rtrue;
];

[ BeforeParsing;
  ClearNarration();
  move hood to parent(cloak);
];

[ AfterPrompt;
  if (System.audioEnabled == 0) {
    ClearNarration();
  }
  else {
    System.FlushBinOrTTSIfNarrationEnabled();
  }
  if (parent(convenience) == parent(player) && convenience.state == 0) {
    remove convenience;
  }
  if (deadflag) {
    System.FlushBinOrTTSIfNarrationEnabled();
  }
];

[ HandleGlkEvent ev context abortres newcmd cmdlen;
  if (isVorpleSupported()) {
  }
  else {
    switch (ev-->0)
    {
    evtype_hyperlink:
      glk_request_hyperlink_event(gg_mainwin);
      if (ev-->2 >= CSLINKID_MIN && ev-->2 <= CSLINKID_MAX) {
        System.clickedContextSensitiveLink = true;
        bp_output_stream(3, longstr, LEN_SHORTSTR);
        print (address)System.currentCommandObject.GetContextSensitiveCommandWord(ev-->2);
        if (System.currentCommandObject) {
          print " ";
          System.currentCommandObject.short_name(true);
        }
        bp_output_stream(-3);
        newcmd = longstr;
        switch (ev-->2) {
          CSLINKID_EXAMINE:
          CSLINKID_TAKE:
          CSLINKID_DROP:
          CSLINKID_OPEN:
          CSLINKID_CLOSE:
          CSLINKID_WEAR:
          CSLINKID_REMOVE:
          CSLINKID_EMPTY:
          default: newcmd = 0;
        }
      }
      else {
        switch (ev-->2) {
          LINKID_YES: newcmd = "Yes";
          LINKID_NO: newcmd = "No";
          LINKID_HERO: newcmd = "Hero";
          LINKID_HEROINE: newcmd = "Heroine";
          LINKID_HERETIC: newcmd = "Heretic";
          LINKID_HELLION: newcmd = "Hellion";
          LINKID_HONEYBADGER: newcmd = "Honeybadger";
          LINKID_CONTINUE: newcmd = "";
          LINKID_NEW: newcmd = "New";
          LINKID_RESTORE: newcmd = "Restore";
          LINKID_COLOR: newcmd = "Color";
          LINKID_CLOAK: newcmd = "examine woven woolen cloak";
          LINKID_HARNESS: newcmd = "examine supple satin lined weapons harness";
          LINKID_SATCHEL: newcmd = "examine slim leather satchel";
          LINKID_TRUNCHEON: newcmd = "examine trusty truncheon";
          LINKID_KNIFE: newcmd = "examine needle pointed knife";
          LINKID_HOOD: newcmd = "examine hood";
          LINKID_PELLET: newcmd = "examine grim green poison pellet";
          LINKID_FAEFLASK: newcmd = "examine glaes faeflask";
          LINKID_CHARGE: newcmd = "examine peril powder charge";
          LINKID_SHOULDERS: newcmd = "examine my shoulders";
          LINKID_FACE: newcmd = "examine my face";
          LINKID_BODY: newcmd = "examine my body";
          LINKID_BACK: newcmd = "examine my back";
          LINKID_HOOD: newcmd = "examine hood";
          LINKID_CARD: newcmd = "examine laminated parchment card";
          LINKID_AUGUSTUS: newcmd = "examine Augustus";
          LINKID_WATCHMAN: newcmd = "examine watchman";
          LINKID_OWTOWER: newcmd = "examine outer watch tower";
          LINKID_TREES: newcmd = "examine trees";
          LINKID_SOUTH: newcmd = "go south";
          LINKID_INVENTORY: newcmd = "inventory";
          LINKID_PATH: newcmd = "examine path";
          LINKID_CHILL: newcmd = "examine chill";
          LINKID_LUTE: newcmd = "examine lute";
          LINKID_MENU: newcmd = "menu";
          LINKID_LOOK: newcmd = "look";
          LINKID_REPUTATION: newcmd = "examine my reputation";
          LINKID_SLEEVE: newcmd = "examine my sleeve";
          LINKID_HANDS: newcmd = "examine my hands";
          LINKID_BLOOD: newcmd = "examine blood";
          LINKID_0: newcmd = "0";
          LINKID_1: newcmd = "1";
          LINKID_2: newcmd = "2";
          LINKID_3: newcmd = "3";
          LINKID_4: newcmd = "4";
          LINKID_5: newcmd = "5";
          LINKID_HELP: newcmd = "Help";
          LINKID_NORTH: newcmd = "go north";
          LINKID_FOREST: newcmd = "examine forest";
          LINKID_MONASTERY: newcmd = "examine monastery";
          LINKID_TYRANT: newcmd = "examine tyrant";
          LINKID_EAGLES: newcmd = "examine eagles";
          LINKID_OAK: newcmd = "examine tall oak";
          LINKID_BRANCHES: newcmd = "examine branches";
          LINKID_BROWNIES: newcmd = "examine brownies";
          LINKID_KNOTS: newcmd = "examine brownie knots";
          LINKID_FEATHERCAP: newcmd = "examine feathered cap";
          LINKID_TUNIC: newcmd = "examine billowing tunic";
          LINKID_CODPIECE: newcmd = "examine codpiece";
          default: newcmd = 0;
        }
      }
      if (newcmd ~= 0) {
        glk_set_style(style_Input);
    		PrintStringOrArray(newcmd);
    		glk_set_style(style_Normal);
    		glk_cancel_line_event(gg_mainwin,0);
    		cmdlen=PrintAnyToArray(abortres+WORDSIZE,INPUT_BUFFER_LEN-WORDSIZE,newcmd);
    		abortres-->0=cmdlen;
    		return 2;
      }
    }
  }
];

Include "grammar.h";
Include "uoai-alchemy.inf";

Extend 'inventory' replace
  *                                           -> UOAIInv
  * 'tall'                                    -> EasterEgg
  * 'wide'                                    -> EasterEgg;

Verb 'kick'
  * -> Kick
  * noun -> Kick;
[ KickSub;
  if (noun) {
    "As much as you love to show off your fancy martial monk kicking skills, time is of the essence tonight.  Stick to the tools of the trade.";
  }
  else {
    "You limber up with some vigorous air kicking, doubtless drawing no attention to yourself whatsoever.";
  }
];

Extend only 'punch' replace
  * -> Punch
  * noun -> Punch;
[ PunchSub;
  if (noun) {
    "Not this time - fisticuffs are a woefully inefficient means of victorious engagement.";
  }
  else {
    "Nothing like a little shadow boxing to get the blood pumping, eh?";
  }
];

Verb 'slash' = 'attack';
Extend 'hit'
  * noun 'with' held -> Attack;

Verb 'clap'
  * -> Clap
  * 'hands' -> Clap
  * 'my' 'hands' -> Clap;
[ ClapSub;
  print "You clap your hands.  ";
  if (charge notin nothing) {
    charge.TickTock();
    if (charge notin nothing) {
      if (TestScope(player,charge)) {
        print "The charge pulses ";
        switch (charge.countdown) {
          2: print "twice";
          1: print "once";
          default: print "several times";
        }
        " with a powerful red glow.";
      }
    }
  }
  print "^";
];


Verb 'menu'
  * -> Interact
  * noun -> Interact;

[ InteractSub;
  if (noun && noun ofclass HyperLinkedObject) {
    print "You might try: ";
    if (noun provides ListCommands) {
      noun.ListCommands();
    }
  }
  else if (noun) {
    "There is no menu of suggestions for ", (the)noun;
  }
  else {
    print "You might try: ";
    System.InlineLink("look", LINKID_LOOK );
    print " , ";
    System.InlineLink("inventory", LINKID_INVENTORY);
  }
];

[ PlayerAddToScope;
  PlaceInScope(shoulders);
  PlaceInScope(face);
  PlaceInScope(body);
  PlaceInScope(back);
  PlaceInScope(hands);
  PlaceInScope(blood);
  PlaceInScope(sleeve);
  PlaceInScope(narrator);
  PlaceInScope(chill);
  PlaceInScope(tyrant);
];

[ GetFirstListedInventory o;
  objectloop(o in actor) {
    if (o hasnt custom_listing) return o;
  }
  return 0;
];

[ InvHarnessContents;
  if (truncheon in harness && knife in harness) {
    QueueBinOutput("na_msg_secured_truncheon_knife");
    print " which secures a ", (name)truncheon, " and a ", (name)knife, " tightly at the small of your ";
    back.short_name();
    print ".  ";
  }
  else if (truncheon in harness) {
    QueueBinOutput("na_msg_secured_truncheon");
    print " which secures a ", (name)truncheon, " tightly at the small of your ";
    back.short_name();
    print ".  ";
  }
  else if (knife in harness) {
    QueueBinOutput("na_msg_secured_knife");
    print " which secures a ", (name)knife, " tightly at the small of your ";
    back.short_name();
    print ".  ";
  }
  else {
    QueueBinOutput("na_msg_harness_empty");
    print ".  The harness is empty.  ";
  }
];
[ InvDescribeHood;
  if (cloak has general) {
    QueueBinOutput("na_msg_hood_on");
    print "The ";
    hood.short_name();
    print " of the ";
    cloak.short_name();
    print " is pulled low over your ";
    face.short_name();
    print ", obscuring your features.  ";
  }
  else {
    QueueBinOutput("na_msg_hood_off");
    print "The ";
    hood.short_name();
    print " of the ";
    cloak.short_name();
    print " hangs down around your ";
    shoulders.short_name();
    print ", revealing your ";
    face.short_name();
    print " to the world.  ";
  }
];

[ UOAIInvSub output harnessDescribed cloakDescribed satchelDescribed reputationDescribed;
  if (harness in actor) {
    if (harness has worn) {
      if (cloak in actor && cloak has worn) {
        QueueBinOutput("na_msg_harness_concealed");
        print "A ", (name)cloak, " conceals a ", (name)harness;
        harnessDescribed = 1;
        cloakDescribed = 1;
        InvHarnessContents();
        InvDescribeHood();
      }
      else {
        QueueBinOutput("na_msg_harness_visible");
        harnessDescribed = 1;
        print "You wear a ", (name)harness;
        InvHarnessContents();
      }
    }
  }
  if (cloakDescribed ~= 1) {
    if (cloak in actor) {
      if (cloak has worn) {
        QueueBinOutput("na_msg_cloak_on");
        print "You are wearing a ";
        cloak.short_name();
        print ".  ";
        cloakDescribed = 1;
        InvDescribeHood();
      }
    }
  }
  if (satchel in actor) {
    if (satchel has worn) {
      QueueBinOutput("na_msg_satchel_on");
      print "A ", (name)satchel, " hangs loosely across your ";
      body.short_name();
      print " from your left ";
      System.InlineLinkText("examine my shoulders","shoulder",LINKID_SHOULDERS);
      print ".  ";
      satchelDescribed = 1;
    }
  }
  if (reputation in actor) {
    if (reputation has worn) {
      QueueBinOutput("na_msg_reputation_on");
      print "You wear your ", (name)reputation, " on your ", (name)sleeve, ".";
      reputationDescribed = 1;
    }
  }
  if (harnessDescribed || cloakDescribed || satchelDescribed || reputationDescribed) {
    print "^^";
  }
  if (harness hasnt worn) give harness ~custom_listing;
  if (cloak hasnt worn) give cloak ~custom_listing;
  if (satchel hasnt worn) give satchel ~custom_listing;
  if (reputation hasnt worn) give reputation ~custom_listing;
  InvSub();
  if (harness hasnt worn) give harness custom_listing;
  if (cloak hasnt worn) give cloak custom_listing;
  if (satchel hasnt worn) give satchel custom_listing;
  if (reputation hasnt worn) give reputation custom_listing;
];

[ EasterEggSub;
  System.codeNameLinkId = LINKID_HACKER;
  "You discovered the super secret command! I hereby dub thee ~Hacker~.";
];


Constant AUDIOEXT_OGG 0;
Constant AUDIOEXT_MP3 1;
Constant AUDIOEXT_NULL 2;

Array INPUT_QUIT buffer "quit";
Array INPUT_NEW buffer "new";
Array INPUT_HELP buffer "help";
Array INPUT_RESTART buffer "restart";
Array INPUT_RESTORE buffer "restore";
Array INPUT_COLOR buffer "color";
Array INPUT_1 buffer "1";
Array INPUT_2 buffer "2";
Array INPUT_3 buffer "3";
Array INPUT_4 buffer "4";
Array INPUT_5 buffer "5";
Array INPUT_REPEAT buffer "0";
Array INPUT_ONE buffer "One";
Array INPUT_TWO buffer "Two";
Array INPUT_THREE buffer "Three";
Array INPUT_FOUR buffer "Four";
Array INPUT_FIVE buffer "Five";
Array INPUT_ZERO buffer "Zero";

Array CODENAME_HERO buffer "hero";
Array CODENAME_HEROINE buffer "heroine";
Array CODENAME_HERETIC buffer "heretic";
Array CODENAME_HELLION buffer "hellion";
Array CODENAME_HONEYBADGER buffer "honeybadger";
Array CODENAME_HACKER buffer "hacker";

Constant LINKID_YES 1;
Constant LINKID_NO 2;
Constant LINKID_HERO 3;
Constant LINKID_HEROINE 4;
Constant LINKID_HERETIC 5;
Constant LINKID_HELLION 6;
Constant LINKID_HONEYBADGER 7;
Constant LINKID_CONTINUE 8;
Constant LINKID_NEW 9;
Constant LINKID_RESTORE 10;
Constant LINKID_COLOR 11;
Constant LINKID_HACKER 12;
Constant LINKID_CLOAK 13;
Constant LINKID_HARNESS 14;
Constant LINKID_SATCHEL 15;
Constant LINKID_TRUNCHEON 16;
Constant LINKID_KNIFE 17;
Constant LINKID_HOOD 18;
Constant LINKID_PELLET 19;
Constant LINKID_FAEFLASK 20;
Constant LINKID_CHARGE 21;
Constant LINKID_SHOULDERS 22;
Constant LINKID_FACE 23;
Constant LINKID_BODY 24;
Constant LINKID_BACK 25;
Constant LINKID_CARD 26;
Constant LINKID_AUGUSTUS 27;
Constant LINKID_WATCHMAN 28;
Constant LINKID_OWTOWER 29;
Constant LINKID_TREES 30;
Constant LINKID_SOUTH 31;
Constant LINKID_INVENTORY 32;
Constant LINKID_PATH 33;
Constant LINKID_CHILL 34;
Constant LINKID_LUTE 35;
Constant LINKID_MENU 36;
Constant LINKID_LOOK 37;
Constant LINKID_REPUTATION 38;
Constant LINKID_SLEEVE 39;
Constant LINKID_HANDS 40;
Constant LINKID_BLOOD 41;
Constant LINKID_0 42;
Constant LINKID_1 43;
Constant LINKID_2 44;
Constant LINKID_3 45;
Constant LINKID_4 46;
Constant LINKID_5 47;
Constant LINKID_HELP 48;
Constant LINKID_NORTH 49;
Constant LINKID_FOREST 50;
Constant LINKID_MONASTERY 51;
Constant LINKID_TYRANT 52;
Constant LINKID_EAGLES 53;
Constant LINKID_OAK 54;
Constant LINKID_BRANCHES 55;
Constant LINKID_BROWNIES 56;
Constant LINKID_KNOTS 57;
Constant LINKID_FEATHERCAP 58;
Constant LINKID_TUNIC 59;
Constant LINKID_CODPIECE 60;

Constant CSLINKID_MIN 1001;
Constant CSLINKID_MAX 1999;
Constant CSLINKID_EXAMINE 1001; !RESUSE THIS VALUE FOR SOMETHING ELSE
Constant CSLINKID_TAKE 1002;
Constant CSLINKID_DROP 1003;
Constant CSLINKID_OPEN 1004;
Constant CSLINKID_CLOSE 1005;
Constant CSLINKID_WEAR 1006;
Constant CSLINKID_REMOVE 1007;
Constant CSLINKID_EMPTY 1008;

Constant PUGILISTICS_SOLUTION 1;
Constant DRAUGHTISTRY_SOLUTION 2;
Constant BLANDISHMENT_SOLUTION 3;
Constant SHIRKOLOGY_SOLUTION 4;
Constant MARTYRDOM_SOLUTION 5;
Constant FIRST_PUZZLE 0;
Constant SECOND_PUZZLE 1;
Constant THIRD_PUZZLE 2;

Constant PUGILISTICS_SCORE 0;
Constant DRAUGHTISTRY_SCORE 1;
Constant BLANDISHMENT_SCORE 2;
Constant SHIRKOLOGY_SCORE 3;
Constant MARTYRDOM_SCORE 4;

Object System
  with
    audioEnabled 0,
    audioExt AUDIOEXT_NULL,
    codeNameLinkId 0,
    currentWeatherLoop 0,
    currentMusicLoop 0,
    currentSingleEffect 0,
    currentCmdSupportsPlayback 1,
    previouslyLooked 0,
    previousExaminedItem 0,
    currentCommandWord 0,
    currentCommandObject 0,
    promptIsClickable 0,
    waitingForEnter 0,
    disableHyperlinks 0,
    puzzleSolutions 0 0 0,
    currentPuzzle -1,
    reputationScores 0 0 0 0 0,
    clickedContextSensitiveLink false,
    FlushBinOrTTSIfNarrationEnabled [;
      if (self.currentCmdSupportsPlayback ~= 1) {
        VorpleExecuteJavaScriptCommand("CancelBin();");
      }
      if (self.audioEnabled) {
        VorpleExecuteJavaScriptCommand("FlushBinOrTTS();");
      }
    ],
    SetCurrentWeatherLoop [ f;
      self.currentWeatherLoop = f;
    ],
    RestartWeatherLoop [ f;
      if (self.audioEnabled) {
        if (f == 0 && currentWeatherLoop ~= 0)
          f = self.currentWeatherLoop;
        if (f ~= 0)
          VorpleExecuteJavaScriptCommand(BuildCommand("restartWeatherLoop('",f,"');"));
      }
    ],
    ClearWeatherLoop [ f;
      self.currentWeatherLoop = 0;
      VorpleExecuteJavaScriptCommand("clearWeatherLoop();");
    ],
    SetCurrentMusicLoop [ f;
      self.currentMusicLoop = f;
    ],
    RestartMusicLoop [ f;
      if (self.audioEnabled) {
        if (f == 0 && currentMusicLoop ~= 0)
          f = self.currentMusicLoop;
        if (f ~= 0)
          VorpleExecuteJavaScriptCommand(BuildCommand("restartMusicLoop('",f,"');"));
      }
    ],
    ClearMusicLoop [ f;
      self.currentMusicLoop = 0;
      VorpleExecuteJavaScriptCommand("clearMusicLoop();");
    ],
    SyncBrowserAudioExtension [;
      switch (self.audioExt) {
        AUDIOEXT_OGG:
          VorpleExecuteJavaScriptCommand("document.audioExt = 'ogg';");
        AUDIOEXT_MP3:
          VorpleExecuteJavaScriptCommand("document.audioExt = 'mp3';");
        default:
          VorpleExecuteJavaScriptCommand("document.audioExt = null;");
      }
    ],
    SyncSystemAudioExtension [ tmp;
      VorpleExecuteJavaScriptCommand("return IsPlayingMP3s();");
      tmp = VorpleWhatNumberWasReturned();
      if (tmp == 1) {
        self.audioExt = AUDIOEXT_MP3;
      }
      else {
        VorpleExecuteJavaScriptCommand("return IsPlayingOGGs();");
        tmp = VorpleWhatNumberWasReturned();
        if (tmp == 1) {
          self.audioExt = AUDIOEXT_OGG;
        }
        else {
          self.audioExt = AUDIOEXT_NULL;
        }
      }
    ],
    StandardPrompt [;
      VorpleExecuteJavaScriptCommand("vorple.prompt.setPrefix('>')");
      bp_output_stream(3, current_prompt, BUFLEN-1);
      print ">";
      bp_output_stream(-3);
    ],
    BlankPrompt [;
      VorpleExecuteJavaScriptCommand("vorple.prompt.setPrefix('')");
      bp_output_stream(3, current_prompt, BUFLEN-1);
      print "";
      bp_output_stream(-3);
    ],
    ClearNonIpadScreen [ ipad;
      if (isVorpleSupported()) {
        VorpleExecuteJavaScriptCommand("return IsIpad();");
        ipad = VorpleWhatNumberWasReturned();
        if (ipad == 0) {
          VorpleExecuteJavaScriptCommand("$('#window0 *:not(.turn.current), .turn.current').empty()");
        }
      }
      else {
        ClearScreen();
      }
    ],
    MsgYesOrNo [;
      print "Please answer ";
      self.InlineLink("Yes",LINKID_YES);
      print " or ";
      self.InlineLink("No",LINKID_NO);
      print ".";
      if (~~isVorpleSupported()) {
        print "^";
      }
    ],
    InlineLink [ text id;
      if (isVorpleSupported() && ~~self.disableHyperlinks) {
        VorpleLinkCommand(text);
      }
      else if (glk_gestalt(gestalt_Hyperlinks, 0) && id > 0 && ~~self.disableHyperlinks) {
        glk_set_hyperlink(id);
        PrintStringOrArray(text);
        glk_set_hyperlink(0);
      }
      else {
        PrintStringOrArray(text);
      }
    ],
    InlineLinkText [ cmd text id;
      if (isVorpleSupported() && ~~self.disableHyperlinks) {
        VorpleLinkCommandText(cmd, text);
      }
      else if (glk_gestalt(gestalt_Hyperlinks, 0) && id > 0 && ~~self.disableHyperlinks) {
        glk_set_hyperlink(id);
        PrintStringOrArray(text);
        glk_set_hyperlink(0);
      }
      else {
        PrintStringOrArray(text);
      }
    ],
    InlineContextualCommand [ id;
      bp_output_stream(3, shortstr, LEN_SHORTSTR);
      print (address)self.currentCommandWord;
      bp_output_stream(-3);

      bp_output_stream(3, hugehugestr, LEN_HUGEHUGESTR);
      print (address)self.currentCommandWord;
      print " ";
      self.currentCommandObject.short_name();
      bp_output_stream(-3);

      if (isVorpleSupported() && ~~self.disableHyperlinks) {
        self.InlineLinkText(VorpleEscape(hugehugestr), shortstr);
        print " ";
      }
      else if (glk_gestalt(gestalt_Hyperlinks, 0) && id > 0 && ~~self.disableHyperlinks) {
        glk_set_hyperlink(id);
        print (address)self.currentCommandWord;
        glk_set_hyperlink(0);
        print " ";
      }
      else {
        print (address)self.currentCommandWord;
        print " ";
      }
    ],
    ClickablePrompt [ id classes;
      if (isVorpleSupported() && ~~self.disableHyperlinks) {
        print ">";
        VorpleExecuteJavaScriptCommand("document.lineInputPrefixElement.innerHTML = '<a onclick=~vorple.prompt.queueCommand(document.menuCommand);~>&gt;</a>';");
      }
      else {
        if (~~self.disableHyperlinks)
          glk_set_hyperlink(LINKID_MENU);
        print ">";
        if (~~self.disableHyperlinks)
          glk_set_hyperlink(0);
      }
    ],
    WaitForEnter [;
      System.waitingForEnter = 1;
      VorpleExecuteJavaScriptCommand("vorple.prompt.setPrefix('')");
      KeyboardPrimitive(buffer, parse);
      VorpleExecuteJavaScriptCommand("vorple.prompt.setPrefix('>')");
      System.waitingForEnter = 0;
      return parse;
    ],
    Pause [;
      if (isVorpleSupported()) {
        VorpleImage("continue.png", "CLICK TO CONTINUE", IMAGE_RIGHT_ALIGNED, 0, "");
      }
      else {
        glk_set_hyperlink(LINKID_CONTINUE);
        print (markup) "<IMG SRC=101 ALIGN='RIGHT' ALT='CLICK TO CONTINUE' WIDTH=240 HEIGHT=43><br>";
        glk_set_hyperlink(0);
      }
      self.WaitForEnter();
      VorpleExecuteJavaScriptCommand("try { document.getElementById(document.currentContinueId).style.display=~none~ } catch(e) {};");
    ],
    BlankVorpleLineIfNoHyperlinks [;
      if (isVorpleSupported()) {
        if (self.disableHyperlinks) {
          print "^";
        }
      }
    ],
    GetCodename [ raw;
      switch (self.codeNameLinkId) {
        LINKID_HERO: if (raw) return CODENAME_HERO; return "Hero";
        LINKID_HEROINE: if (raw) return CODENAME_HEROINE; return "Heroine";
        LINKID_HERETIC: if (raw) return CODENAME_HERETIC; return "Heretic";
        LINKID_HELLION: if (raw) return CODENAME_HELLION; return "Hellion";
        LINKID_HONEYBADGER: if (raw) return CODENAME_HONEYBADGER; return "Honeybadger";
        default: if (raw) return CODENAME_HACKER; return "Hacker";
      }
    ],
    GraceNote [ channel;
      if (isVorpleSupported()) {
        VorpleImage("gracenotes.png", "MUSICAL INTERLUDE");
      }
      else {
        print (markup) "<IMG SRC=100 ALT='MUSICAL INTERLUDE' WIDTH=500 HEIGHT=30><br>";
      }
    ],
    ReportReputation [;
      print "You will be remembered according to the following specific reputation scores:^";
      print System.&reputationScores-->PUGILISTICS_SCORE, " for Pugilistics, the Sciences of Violences.^";
      print System.&reputationScores-->DRAUGHTISTRY_SCORE, " for Draughtistry, your Notions for Potions.^";
      print System.&reputationScores-->BLANDISHMENT_SCORE, " for Blandishment, the Knit of your Wit.^";
      print System.&reputationScores-->SHIRKOLOGY_SCORE, " for Shirkology, your Mastery of Craven Surrender and Meaningless Death.^";
      if (System.&reputationScores-->MARTYRDOM_SCORE == 0)
        print System.&reputationScores-->MARTYRDOM_SCORE, " for Martyrdom, because you're Not Dead Yet.^";
      else
        print System.&reputationScores-->MARTYRDOM_SCORE, " for Martyrdom, May You Rest in Peace.^";
    ],
    MultipleChoiceQuery [text r1 r2 r3 r4 r5 loop choice;
      .FreshQuery;
      loop = true;
      PrintStringOrArray(text);
      print "^";
      VorpleStyle(STYLE_EMPHASIS);
      print (markup)"^<U>Select your response:</U>^";
      VorpleEndStyle();
      if (r1) {
        print "  ";
        System.InlineLinkText("One","1",LINKID_1);
        print ". ";
        PrintStringOrArray(r1);
        print "^";
      }
      if (r2) {
        print "  ";
        System.InlineLinkText("Two","2",LINKID_2);
        print ". ";
        PrintStringOrArray(r2);
        print "^";
      }
      if (r3) {
        print "  ";
        System.InlineLinkText("Three","3",LINKID_3);
        print ". ";
        PrintStringOrArray(r3);
        print "^";
      }
      if (r4) {
        print "  ";
        System.InlineLinkText("Four","4",LINKID_4);
        print ". ";
        PrintStringOrArray(r4);
        print "^";
      }
      if (r5) {
        print "  ";
        System.InlineLinkText("Five","5",LINKID_5);
        print ". ";
        PrintStringOrArray(r5);
        print "^";
      }
      print "  ";
      VorpleStyle(STYLE_EMPHASIS);
      glk_set_style(style_Alert);
      System.InlineLinkText("Zero","0",LINKID_0);
      print ". Repeat the question.";
      glk_set_style(style_Normal);
      VorpleEndStyle();

      while (loop) {
        choice = 0;
        Keyboard(buffer,parse);
        ClearNarration();
        if (r1 && (CompareStrings(buffer,INPUT_1) || CompareStrings(buffer,INPUT_ONE))) choice = 1;
        else if (r2 && (CompareStrings(buffer,INPUT_2) || CompareStrings(buffer,INPUT_TWO))) choice = 2;
        else if (r3 && (CompareStrings(buffer,INPUT_3) || CompareStrings(buffer,INPUT_THREE))) choice = 3;
        else if (r4 && (CompareStrings(buffer,INPUT_4) || CompareStrings(buffer,INPUT_FOUR))) choice = 4;
        else if (r5 && (CompareStrings(buffer,INPUT_5) || CompareStrings(buffer,INPUT_FIVE))) choice = 5;
        else if (CompareStrings(buffer,INPUT_REPEAT) || CompareStrings(buffer,INPUT_ZERO)) choice = -1;
        switch (choice) {
          -1: jump FreshQuery;
        }
        if (choice) {
          loop = false;
        }
        else {
          print "Please enter the number of your response, or 0 to repeat the question.^";
        }
      }
      return choice;
    ];

[ Initialise o;
    location = clearing;
    inventory_style = FULLINV_BIT + ENGLISH_BIT;
    no_implicit_actions = true;
    glk_request_hyperlink_event(gg_mainwin);
    VorpleInitialise();
    VorpleStopAudio();

    objectloop(o provides articles) {
      if (isVorpleSupported() == 0) {
        o.&articles-->0 = "The ";
        o.&articles-->1 = "the ";
        o.&articles-->2 = "a ";
      }
    }

    move satchel to player;
    move cloak to player;
    move harness to player;
    move reputation to player;
    move sleeve to player;
    player.add_to_scope = PlayerAddToScope;
    StartDaemon(augustus);
    StartDaemon(distant_watchman);
];

Class HyperLinkedObject
  with
    GetContextSensitiveLinkID [cmd;
      switch (cmd) {
        'examine': return CSLINKID_EXAMINE;
        'take': return CSLINKID_TAKE;
        'drop': return CSLINKID_DROP;
        'open': return CSLINKID_OPEN;
        'close': return CSLINKID_CLOSE;
        'wear': return CSLINKID_WEAR;
        'remove': return CSLINKID_REMOVE;
        'empty': return CSLINKID_EMPTY;
        default: return 0;
      }
    ],
    GetContextSensitiveCommandWord [id;
      switch (id) {
        CSLINKID_EXAMINE: return 'examine';
        CSLINKID_TAKE: return 'take';
        CSLINKID_DROP: return 'drop';
        CSLINKID_OPEN: return 'open';
        CSLINKID_CLOSE: return 'close';
        CSLINKID_WEAR: return 'wear';
        CSLINKID_REMOVE: return 'remove';
        CSLINKID_EMPTY: return 'empty';
        default: return 0;
      }
    ],
    ListCommands [ ix it;
      if (self provides basic_commands) {
        for (ix = 0: ix < (self.#basic_commands/4): ix++) {
          it++;
          if (it > 1 && ix < (self.#basic_commands/4)) {
            print ", ";
          }
          System.currentCommandWord = self.&basic_commands-->ix;
          System.currentCommandObject = noun;
          System.InlineContextualCommand(self.GetContextSensitiveLinkID(self.&basic_commands-->ix));
          System.currentCommandWord = 0;
        }
      }
      if (self provides open_commands) {
        for (ix = 0: ix < (self.#open_commands/4): ix++) {
          it++;
          if (it > 1 && ix < (self.#open_commands/4)) {
            print ", ";
          }
          System.currentCommandWord = self.&open_commands-->ix;
          System.currentCommandObject = noun;
          System.InlineContextualCommand(self.GetContextSensitiveLinkID(self.&open_commands-->ix));
          System.currentCommandWord = 0;
        }
      }
      if (self provides wear_commands) {
        for (ix = 0: ix < (self.#wear_commands/4): ix++) {
          it++;
          if (it > 1 && ix < (self.#wear_commands/4)) {
            print ", ";
          }
          System.currentCommandWord = self.&wear_commands-->ix;
          System.currentCommandObject = noun;
          System.InlineContextualCommand(self.GetContextSensitiveLinkID(self.&wear_commands-->ix));
          System.currentCommandWord = 0;
        }
      }
      if (self provides container_commands) {
        for (ix = 0: ix < (self.#container_commands/4): ix++) {
          it++;
          if (it > 1 && ix < (self.#container_commands/4)) {
            print ", ";
          }
          System.currentCommandWord = self.&container_commands-->ix;
          System.currentCommandObject = noun;
          System.InlineContextualCommand(self.GetContextSensitiveLinkID(self.&container_commands-->ix));
          System.currentCommandWord = 0;
        }
      }
    ];

Class HyperLinkedItem
  class HyperLinkedObject,
  with
    basic_commands 'examine' 'take' 'drop';

Class HyperLinkedWearable
  class HyperLinkedObject,
  with
    wear_commands 'wear' 'remove';

Class HyperLinkedOpenable
  class HyperLinkedObject,
  with
    open_commands 'open' 'close';

Class HyperLinkedContainer
  class HyperLinkedObject,
  with
    container_commands 'empty';

Class HyperLinkedContextQueues
  class HyperLinkedObject;

[ TestMode;
  System.Pause();
  System.promptIsClickable = 1;
  System.audioEnabled = 1;
  System.SyncSystemAudioExtension();
  System.codeNameLinkId = LINKID_HERO;
  System.SetCurrentMusicLoop("music_loop_1");
  System.RestartMusicLoop();
  System.SetCurrentWeatherLoop("se_rain30");
  System.RestartWeatherLoop();
  ClearNarration();
  System.currentPuzzle = FIRST_PUZZLE;
];

[ HelpCommand;
  print "Help requested. Sound on / sound off.  Clickable prompt, commands.  Double examine, Interact command.^";
];

[ InitialQuery tmp;
  print "^A twilight mission to cripple the crown, but some musician won't pipe down! Fortunately, foul play is your forte...^^";

  VorpleStyle(STYLE_EMPHASIS);
  print (markup) "<U>DIRECTOR'S NOTE:^This game supports clickable command words highlighted in this ";
  System.InlineLink("Color",LINKID_COLOR);
  print (markup) " as well as traditional typed commands.  If this is your first time playing, start with the ";
  System.InlineLink("Help",LINKID_HELP);
  print (markup) " command.</U>^^";
  VorpleEndStyle();
  print "Please enter or select ";
  System.InlineLink("Help",LINKID_HELP);
  print " for some introductory tips, ";
  System.InlineLink("New",LINKID_NEW);
  print " to start a new game, or ";
  System.InlineLink("Restore",LINKID_RESTORE);
  print (markup) " to resume a previously saved session.</U>";
  tmp = 0;
  while (tmp == 0) {
    Keyboard(buffer, parse);
    StringToLower(buffer);
    if (CompareStrings(buffer,INPUT_COLOR)) {
      print "Don't be silly.  ";
      System.InlineLink("Color",LINKID_COLOR);
      print " is just an example, not a valid command.^";
    }
    if (CompareStrings(buffer,INPUT_RESTORE) || CompareStrings(buffer,INPUT_NEW) || CompareStrings(buffer,INPUT_HELP)) {
      if (CompareStrings(buffer,INPUT_RESTORE)) {
        tmp = 0;
        RestoreSub();
        print "^Please enter ";
        System.InlineLink("Help",LINKID_HELP);
        print " for some introductory tips, ";
        System.InlineLink("New",LINKID_NEW);
        print " to start a new game, or ";
        System.InlineLink("Restore",LINKID_RESTORE);
        print " to resume a previously saved session.^";
      }
      else if (CompareStrings(buffer,INPUT_HELP)) {
        HelpCommand();
        print "^Please enter ";
        System.InlineLink("New",LINKID_NEW);
        print " to start a new game, or ";
        System.InlineLink("Restore",LINKID_RESTORE);
        print " to resume a previously saved session.^";
      }
      else {
        tmp = 1;
      }
    }
    else {
      print "^Please enter ";
      System.InlineLink("Help",LINKID_HELP);
      print " for some introductory tips, ";
      System.InlineLink("New",LINKID_NEW);
      print " to start a new game, or ";
      System.InlineLink("Restore",LINKID_RESTORE);
      print " to resume a previously saved session.^";
    }
  }
];

[ InteractiveIntroduction tmp v key;
  key = 0;
  System.StandardPrompt();
  if (isVorpleSupported()) {
    VorpleExecuteJavaScriptCommand("return IsTTSSupported();");
    tmp = VorpleWhatNumberWasReturned();
    if (tmp == 1) {
      v = true;
      !FIXME add a compelling and funny first line
      #Ifdef TEST_MODE;
      return TestMode();
      #Endif;
      InitialQuery();
      print "^Would you like to enable audio? ";
      System.MsgYesOrNo();
      System.audioEnabled = YesOrNo();
      if (System.audioEnabled) {
        ClearNarration();
        QueueBinOutput("3_0_silence");
        QueueBinOutput("na_intro_1");
        System.SetCurrentWeatherLoop("se_rain30");
        System.RestartWeatherLoop();
        VorplePlaySoundEffect("se_thunder_1");
        print "^";
        print "^NARRATOR:^";
        print "The crash of thunder and a deluge of life-giving waters - perfect weather for revolution! Do you hear all that? (";
        System.InlineLink("Yes",LINKID_YES);
        print " or ";
        System.InlineLink("No",LINKID_NO);
        print ")^";
        System.FlushBinOrTTSIfNarrationEnabled();
        tmp = YesOrNo();
        if (tmp) {
          System.SyncSystemAudioExtension();
        }
        else {
          VorpleExecuteJavaScriptCommand("ToggleAudioExtension();");
          ClearNarration();
          QueueBinOutput("3_0_silence");
          System.SetCurrentWeatherLoop("se_rain30");
          System.RestartWeatherLoop();
          VorplePlaySoundEffect("se_thunder_1");
          QueueBinOutput("na_intro_1b");
          print "^";
          print "^Oh, how about now then? (";
          System.InlineLink("Yes",LINKID_YES);
          print " or ";
          System.InlineLink("No",LINKID_NO);
          print ")^";
          System.FlushBinOrTTSIfNarrationEnabled();
          tmp = YesOrNo();
          if (tmp) {
            System.SyncSystemAudioExtension();
          }
        }
        if (tmp) {
          ClearNarration();
          QueueBinOutput("na_intro_1c");
          QueueBinOutput("se_pause");
          QueueBinOutput("na_intro_1d");
          QueueBinOutput("se_pause");
          print "^";
          !FIXME implement SOUND ON / SOUND OFF
          print "^When you see the continue symbol or hear the report of musical drums...you should tap continue or press the enter key to proceed.^";
          System.FlushBinOrTTSIfNarrationEnabled();
          System.Pause();
          ClearNarration();
          QueueBinOutput("na_intro_2");
          QueueBinOutput("se_pause");
          print "^";
          print "^On occasion, the game may employ miraculous text-to-speech technology to read some words aloud.^";
          System.FlushBinOrTTSIfNarrationEnabled();
          System.Pause();
          ClearNarration();
          print "^This is some sample text-to-speech.  Would you like to customize the voice? (";
          System.InlineLink("Yes",LINKID_YES);
          print " or ";
          System.InlineLink("No",LINKID_NO);
          print ")^";
          System.FlushBinOrTTSIfNarrationEnabled();
          tmp = YesOrNo();
          if (tmp) {
            ClearNarration();
            print "^So would I.  Alas, not today.  Enjoy the game!";
            PunctuateTTS();
            System.FlushBinOrTTSIfNarrationEnabled();
            key = 1;
          }
          else {
            ClearNarration();
            QueueBinOutput("na_intro_3");
            QueueBinOutput("se_pause");
            print "^";
            print "^Excellent.  You are ready to begin.  Enjoy the game!^";
            System.FlushBinOrTTSIfNarrationEnabled();
            key = 1;
          }
        }
        else {
          ClearNarration();
          System.ClearMusicLoop();
          System.ClearWeatherLoop();
          VorpleStopAudio();
          print "^Never mind about the audio then.  When you see the continue symbol you should tap continue or press the enter key to proceed.";
          key = 1;
          System.audioEnabled = 0;
        }
      }
      else {
        print "^When you see the continue symbol you should tap continue or press the enter key to proceed.";
        key = 1;
      }
    }
    else {
      v = false;
    }
  }
  else {
    v = false;
  }
  if (v == false) {
    #Ifdef TEST_MODE;
    return TestMode();
    #Endif;
    InitialQuery();

    print "^NARRATOR:^";
    print "Please note that this version of the game has no audio.  When you see the continue symbol, tap it or press enter to proceed.  Enjoy the game!^^";
    key = 1;
  }
  if (key == 1) {
    System.Pause();
  }
  ClearNarration();
  print "^^";
  System.ClearNonIpadScreen();

  !FIXME Improve concision and humor
  if (isVorpleSupported()) {
    VorpleImage("title.png", "The Uninvited Epic Of Augustus Interruptus");
  }
  else {
    print (markup) "<IMG SRC=102 ALT='The Uninvited Epic of Augustus Interruptus'<br>";
    print "^";
  }

  QueueBinOutput("na_prologue_1");
  print "^";
  print "NARRATOR:^";
  print "How did it come to this? Look no further than the madness of King Hagberry and Queen Hamada. Their sickly pallor of peace and prosperity blanches the entire countryside.  Unconditionally free healthcare? Prohibition of pointless war? Libraries that charge as much as a penny per day for overdue books? Finally, the hour of liberation approaches.  The crown shall crumble tonight, and you shall be the crumbler!^";
  print "^Twenty-four years under the grueling guidance of the Order of Humble Pride, a cabal of freedom fighters masquerading as learned monks.  They found you as an abandoned infant wailing in the woods and took you in.  They came to call you...was it ";
  System.InlineLink("Hero",LINKID_HERO);
  print "? ";
  System.InlineLink("Heroine",LINKID_HEROINE);
  print "? ";
  System.InlineLink("Heretic",LINKID_HERETIC);
  print "? ";
  System.InlineLink("Hellion",LINKID_HELLION);
  print "? ";
  print "Or perhaps ";
  System.InlineLink("Honeybadger",LINKID_HONEYBADGER);
  print "? Please be a dear and remind me.^";
  System.FlushBinOrTTSIfNarrationEnabled();
  if (true) {
    tmp = false;
    while (tmp == false) {
      Keyboard(buffer, parse);
      StringToLower(buffer);

      if (CompareStrings(buffer,CODENAME_HERO) || CompareStrings(buffer,CODENAME_HEROINE)) {
        tmp = true;
      }
      else if (CompareStrings(buffer,CODENAME_HERETIC)) {
        tmp = true;
      }
      else if (CompareStrings(buffer,CODENAME_HELLION)) {
        tmp = true;
      }
      else if (CompareStrings(buffer,CODENAME_HONEYBADGER)) {
        tmp = true;
      }
      else {
        ClearNarration();
        QueueBinOutput("na_prologue_1_rejection");
        print "^No no no, it can't be that.  Please enter ";
        System.InlineLink("Hero",LINKID_HERO);
        print ", ";
        System.InlineLink("Heroine",LINKID_HEROINE);
        print ", ";
        System.InlineLink("Heretic",LINKID_HERETIC);
        print ", ";
        System.InlineLink("Hellion",LINKID_HELLION);
        print ", or ";
        System.InlineLink("Honeybadger",LINKID_HONEYBADGER);
        print ".^";
        System.FlushBinOrTTSIfNarrationEnabled();
      }
    }
    System.SetCurrentMusicLoop("music_loop_1");
    System.RestartMusicLoop();
    ClearNarration();
    QueueBinOutput("na_prologue_1_ahyes");
    print "^";
    print "^Ah yes - ";
    if (CompareStrings(buffer,CODENAME_HERO) || CompareStrings(buffer,CODENAME_HEROINE)) {
      if (CompareStrings(buffer,CODENAME_HERO)) {
        System.codeNameLinkId = LINKID_HERO;
        QueueBinOutput("na_prologue_1_hero");
        print "Hero! ";
      }
      else {
        System.codeNameLinkId = LINKID_HEROINE;
        QueueBinOutput("na_prologue_1_heroine");
        print "Heroine! ";
      }
      QueueBinOutput("na_prologue_1_hero_fate");
      QueueBinOutput("na_prologue_1_wait");
      print "Destined to save your nation and change the world! Wait, I'm sorry.  Do you hear that? It sounds like someone is playing a lute - and poorly, I might add...^";
    }
    else if (CompareStrings(buffer,CODENAME_HERETIC)) {
      System.codeNameLinkId = LINKID_HERETIC;
      QueueBinOutput("na_prologue_1_heretic");
      QueueBinOutput("na_prologue_1_heretic_fate");
      QueueBinOutput("na_prologue_1_wait");
      print "Heretic! Ever ready to trample the trappings of fear and falsehood beneath your two bare feet.  Wait, I'm sorry.  Do you hear that? It sounds like someone is playing a lute - and poorly, I might add...^";
    }
    else if (CompareStrings(buffer,CODENAME_HELLION)) {
      System.codeNameLinkId = LINKID_HELLION;
      QueueBinOutput("na_prologue_1_hellion");
      QueueBinOutput("na_prologue_1_hellion_fate");
      QueueBinOutput("na_prologue_1_wait");
      print "Hellion! Relentlessly spitting in the face of fickle fate! Wait, I'm sorry.  Do you hear that? It sounds like someone is playing a lute - and poorly, I might add...^";
    }
    else if (CompareStrings(buffer,CODENAME_HONEYBADGER)) {
      System.codeNameLinkId = LINKID_HONEYBADGER;
      QueueBinOutput("na_prologue_1_honeybadger");
      QueueBinOutput("na_prologue_1_honeybadger_fate");
      QueueBinOutput("na_prologue_1_wait");
      print "Honeybadger! The soul of a wolverine in the body of a...wolverinish...badger body! Wait, I'm sorry.  Do you hear that? It sounds like someone is playing a lute - and poorly, I might add...^";
    }
  }
  QueueBinOutput("na_prologue_1_conclusion");
  QueueBinOutput("se_pause");
  !print "^";
  print "...well, that's something not seen every day.  A songsmith in full dress - flamboyant tunic, feathered cap and all!^";

  System.FlushBinOrTTSIfNarrationEnabled();
  System.promptIsClickable = 1;
  System.Pause();
  ClearNarration();
  System.ClearNonIpadScreen();
  QueueBinOutput("as_intro_v1");
  bp_output_stream(3, hugehugestr, LEN_HUGEHUGESTR);
  print "as_intro_v2_";
  PrintStringOrArray(System.GetCodename(true));
  bp_output_stream(-3);
  QueueBinOutput(hugehugestr);
  QueueBinOutput("as_intro_v3_aside");
  if (isVorpleSupported()) {
    print "^";
  }
  print "^";
  print "~Who will fight oppression? Who will save us from our shame?^";
  print "One rises to the challenge! ";
  PrintStringOrArray(System.GetCodename());
  print " is their name!^";
  print "^";
  print "Hello! Call me Augustus - apprentice songsmith.  Don't mind me, go on about your secret mission.  You won't even know I'm here.~^";
  System.currentPuzzle = FIRST_PUZZLE;
];

[ QueueBinOutput f;
  if (isVorpleSupported()) {
    print "=";
    PrintStringOrArray(f);
    print ";";
  }
];

[ PunctuateTTS;
  if (isVorpleSupported()) {
    print "=!;^";
  }
];

Object tower_base "Outer Watch Tower..."
  with
    x 10,
    y 9,
    z 0,
    description "Safe here for now.",
    n_to clearing,
  has light;


Object climbed_oak "Tall Oak, Level 1"
  with
    x 10,
    y 10,
    z 1,
    description "Safe here for now.",
    d_to clearing,
  has light;
  Object -> redball "red ball"
    with name 'red' 'ball';
  Object -> greenball "green ball"
  with name 'green' 'ball';

Object clearing "Shadowy Clearing"
  with
    x 10,
    y 10,
    z 0,
    s_to tower_base,
    short_name [;
      !bp_output_stream(3, hugehugestr, LEN_HUGEHUGESTR);
      !print "na_msg_our_";
      !PrintStringOrArray(System.GetCodename(true));
      !bp_output_stream(-3);
      !QueueBinOutput(hugehugestr);
      QueueBinOutput("na_room_clearing");
      !print "Our ";
      !PrintStringOrArray(System.GetCodename());
      print "You Linger in a Shadowy Clearing^";
      return true;
    ],
    description [;
      QueueBinOutput("na_desc_clearing");
      print "Immediately to the ";
      System.InlineLinkText("go south","south",LINKID_SOUTH);
      print ", the ";
      distant_tower.short_name();
      print " rises high above the ";
      forest.short_name();
      print ".  A treacherous trek ";
      System.InlineLinkText("go north","north",LINKID_NORTH);
      print " will take you back to the ";
      monastery.short_name();
      ".";
    ],
    before [flee;
      Go:
        if (noun == n_obj) {
          if (augustus in real_location && augustus hasnt general) {
            print "~If ";
            PrintStringOrArray(System.GetCodename());
            print " goes home now, they surely lose the day!^";
            print "Discretion is the better part of valor, so they say...^";
            print "Are you sure you wish to bravely run away?~^^";
            System.MsgYesOrNo();
            if (~~isVorpleSupported()) {
              print ">";
            }
          }
          else {
            print "You haven't accomplished your mission yet.  Are you sure you wish to return to the monastery in disgrace? ";
            System.MsgYesOrNo();
            if (~~isVorpleSupported()) {
              print "^>";
            }
          }
          System.FlushBinOrTTSIfNarrationEnabled();
          flee = YesOrNo();
          ClearNarration();
          if (flee) {
            deadflag = 3;
            score = score + 1;
            System.&puzzleSolutions-->System.currentPuzzle = SHIRKOLOGY_SOLUTION;
            System.&reputationScores-->SHIRKOLOGY_SCORE = System.&reputationScores-->SHIRKOLOGY_SCORE + 1;
          }
          else {
            print "~Our ";
            PrintStringOrArray(System.GetCodename());
            print " answers Nay! And continues on their way...~^";
          }
          return true;
        }
    ],
  has light;

  Object -> trees "trees"
    with
      name 'trees' 'tree',
      short_name [;
        System.InlineLinkText("examine trees", "trees", LINKID_TREES);
        return true;
      ],
      before [;
        Climb:
          "Is there a specific tree you have in mind?";
      ],
      description [;
        "A distinguished variety of deciduous vegetation surrounds you.  A ", (name)oak, ", featuring low, inviting ", (name)branches, " and pockmarked with ", (name)knots, " stands out in particular.";
      ],
    has scenery pluralname;

  Object -> oak "tall oak"
    with
      name 'tall' 'oak' 'trunk',
      short_name [;
        System.InlineLinkText("examine tall oak", "tall oak", LINKID_OAK);
        return true;
      ],
      before [;
        Climb:
          PlayerTo(climbed_oak);
          return true;
      ],
      description [;
        print (The)oak, " easily stands half as high as the ", (name)distant_tower, " itself.  Tiny pairs of bright yellow ";
        System.InlineLinkText("examine eyes", "eyes", LINKID_BROWNIES);
        print " sparkle at you from within the many ", (name)knots, " found up and down the trunk.^";
      ],
    has scenery;

  Object -> brownies "brownies"
    with
      name 'brownies' 'tiny' 'yellow' 'eyes' 'umber' 'tribe',
      short_name [;
        System.InlineLinkText("examine brownies", "brownies", LINKID_BROWNIES);
        return true;
      ],
      description [;
        print "You recognize them from their yellow ";
        System.InlineLinkText("examine eyes", "eyes", LINKID_BROWNIES);
        print " - this ";
        System.InlineLinkText("examine tall oak", "oak", LINKID_OAK);
        " is claimed by the Umber Tribe, a relatively friendly nation of brownie merchants and artisans.";
      ],
    has scenery pluralname;

  Object -> knots "brownie knots"
    with
      name 'brownie' 'knots' 'glowing' 'bubbles',
      short_name [;
        System.InlineLinkText("examine brownie knots", "brownie knots", LINKID_KNOTS);
        return true;
      ],
      description [;
        "Glowing bubbles of bark that erupt along the entire visible surface of ", (the) oak, "'s trunk.  Perhaps these are tiny doors or windows of some kind.";
      ],
    has scenery pluralname;

  Object -> branches "branches"
    with
      name 'low' 'inviting' 'branches',
      short_name [;
        System.InlineLinkText("examine branches", "branches", LINKID_BRANCHES);
        return true;
      ],
      before [;
        Climb:
          <<Climb oak>>;
      ],
      description [;
        "",(The)branches, " of ", (the)oak, " are sturdy and well within reach.";
      ],
    has scenery pluralname;

  Object -> forest "forest"
    with
      name 'forest' 'woods' 'fiends' 'of',
      short_name [;
        System.InlineLinkText("examine forest", "forest", LINKID_FOREST);
        return true;
      ],
      before [;
        Climb:
          "Baby steps, my friend.  Try climbing a single tree.";
      ],
      description [;
        "The aptly named Forest of Fiends boasts a wealth of ", (name)trees, " and it shelters all manner of magical miscreants.  They rarely leave the ", (name)forest, " but occasionally trade with shopkeepers.";
      ],
    has scenery;

  Object -> monastery "monastery"
    with
      name 'monastery',
      short_name [;
        System.InlineLinkText("examine monastery", "monastery", LINKID_MONASTERY);
        return true;
      ],
      description [;
        "The monastery of the Order of Humble Pride is buried deep within ", (the)forest, ".  You can't see it from here.";
      ],
      has scenery;

    Object -> eagles "eagles"
      with
        name 'eagles',
        short_name [;
          System.InlineLinkText("examine eagles", "eagles", LINKID_MONASTERY);
          return true;
        ],
        description [;
          "Actually, ", (name)eagles, " have been extinct for centuries.  But one never knows.  Perhaps they'll come back, and if they do...you'll be ready.";
        ],
        before [;
          if (action == ##Examine) {
              return false;
          }
          else {
            "You have no time to fantasize about frolicking with extinct avians.  Back to the business of rebellion!";
          }
        ],
        has scenery pluralname;

  Object -> path "path"
    with
      name 'path',
      short_name [;
        System.InlineLinkText("examine path", "path", LINKID_PATH);
        return true;
      ],
      description [;
        print "The only ";
        self.short_name();
        print " through the dense ";
        trees.short_name();
        print " runs ";
        System.InlineLinkText("go south","south",LINKID_SOUTH);
        if (parent(augustus) == parent(path)) {
          if (augustus hasnt general) {
            print ", but ";
            augustus.short_name();
            print " is in the way";
          }
          else {
            print ", and fortunately ";
            augustus.short_name();
            print " is no longer in the way";
          }
        }
        ".";
      ],
      has scenery;

  Object -> distant_tower "outer watch tower"
    with
      name 'outer' 'watch' 'tower',
      short_name [;
        System.InlineLinkText("examine outer watch tower", "outer watch tower", LINKID_OWTOWER);
        return true;
      ],
      description [;
        print "A ten story sandstone ", (name)distant_tower, " with no known proper enemies to watch for? Foolishness! You can just make out a single ";
        distant_watchman.short_name();
        " standing at the summit, no doubt wiling away the hours ogling ", (name)eagles, ".";
      ],
    has scenery;

  Object -> distant_watchman "watchman"
    with
      name 'guard' 'watchman',
      facing s_obj,
      short_name [;
        System.InlineLinkText("examine watchman", "watchman", LINKID_WATCHMAN);
        return true;
      ],
      description [;
        print "You cannot see the ";
        self.short_name();
        print " very well from here.  He can likely scan for miles in all directions from his position on ", (the)distant_tower, ".  ";
        print "At present, he faces ";
        switch (self.facing) {
          s_obj: print "south, his back turned to you";
          w_obj: print "west";
          n_obj: print "north, directly facing the forest and monastery";
          e_obj: print "east";
          default: print "south";
        }
        ".";
      ],
      daemon [;
        switch (self.facing) {
          s_obj: self.facing = w_obj;
          w_obj: self.facing = n_obj;
          n_obj: self.facing = e_obj;
          e_obj: self.facing = s_obj;
          default: self.facing = s_obj;
        }
      ],

    has scenery;

  Object -> augustus "Augustus"
    with
      chargeQueryChoice 0,
      parchCount 2,
      parchReset 5,

      short_name [;
        System.InlineLinkText("examine Augustus", "Augustus", LINKID_AUGUSTUS);
        return true;
      ],
      name 'augustus',
      description [;
        if (self has general) {
          "Unconsciousness has improved his music considerably...";
        }
        else {
          if (augustus hasnt general) {
            "~And who might be this dashing chap, with maple ", (name)lute, " and ", (name)feathercap, "?^In violet velvet clothes uncreased from ", (name)tunic, " to his ", (name)codpiece, "!^Foresooth! ", (name)Augustus, " I am called! I sing of large! I sing of small!^I'll chronicle each pride and shame to craft the legend of your name!~";
          }
          else {
          }
        }
      ],
      react_before [;
        Go:
          if (System.currentPuzzle == FIRST_PUZZLE) {
            if (actor == player && noun == s_obj) {
              print "~Augustus, so enrapt in instrumental predilection,^";
              print "unknowingly he blocks our ";
              PrintStringOrArray(System.GetCodename());
              print "'s path in that direction!~^";
              return true;
            }
          }
      ],
      RespondToCharge [;
        if (~~self.chargeQueryChoice) {
          self.chargeQueryChoice = self.QueryAboutCharge();
          return true;
        }
      ],
      QueryAboutCharge [;
        return System.MultipleChoiceQuery("^Augustus peaks curiously at your peril powder charge. ~What is that? I've never seen one before.~","Truth", "Lie", "Dismiss", "Ignore");
      ],
      daemon [ acted;
        if (self.parchCount > 0) self.parchCount = self.parchCount - 1;
        if (TestScope(self,charge)) {
          acted = self.RespondToCharge();
        }
        if (~~acted) {
          if (self.parchCount == 0) {
            if (TestScope(self,player)) {
              print "^~Free drinks from the venue! It's in my contract.  Singing is thirsty work.~^";
            }
            self.parchCount = self.parchReset;
            acted = true;
          }
        }
      ],
      initial [;
        System.BlankVorpleLineIfNoHyperlinks();
        if (self hasnt general) {
          QueueBinOutput("na_desc_augustus_1");
          self.short_name();
          print " is here attentively playing a ";
          lute.short_name();
          print " and obliviously blocking your ";
          path.short_name();
          print " ";
          System.InlineLinkText("go south","south",LINKID_SOUTH);
          ".";
        }
        else {
          self.short_name();
          print " lies at your feet face down and unconcious, his hands curled tightly around the neck of his ";
          lute.short_name();
          ".";
        }
      ],
      before [ specified tool o;
        Attack:
          if (System.currentPuzzle == FIRST_PUZZLE) {
            if (second) {
              tool = second;
              specified = 1;
            }
            if (~~tool) objectloop (o in player && o hasnt worn && o provides weapon && o provides nonlethal && ~~tool) tool = o;
            if (~~tool) objectloop (o in player && o hasnt worn &&  o provides weapon && o provides messy && ~~tool) tool = o;
            if (~~tool) objectloop (o in player && o hasnt worn &&  o provides weapon && ~~tool) tool = o;
            if (~~tool) objectloop (o in player && o hasnt worn && ~~tool) tool = o;
            if (~~tool) {
              "Not a bad idea, but assaulting ", (name)augustus, " unarmed may alert bystanders or guards.  You may not want to draw the attention of that ", (name)distant_watchman, " if you can help it.";
            }
            if (tool provides messy) {
              "While ", (the)tool, " will certainly do the job, you may be left covered in the poor man's gore.  That won't be easy to explain to an officer, and your License to Lie has precious few uses left.  Save the blade for despots and their dogs.";
            }
            if (tool provides nonlethal) {
              give augustus general;
              StopDaemon(augustus);
              System.currentPuzzle = SECOND_PUZZLE;
              System.ClearMusicLoop();
              "",(the)augustus, " is so busy playing that he doesn't even see it coming.  He drops like a stone.";
            }
            if (tool provides weapon) {
              "Perhaps you could learn to wield ", (the)tool, " given sufficient time and practice.  Right now, you have neither.  Choose a more familiar ~friend~ for this work.";
            }
            if (~~specified) {
              "",(The)tool, " is not an effective melee instrument! Arm yourself with something more practical.";
            }
            if (specified) {
              "Having spent your life honing your skills with proper weapons, you are now going to attack ", (the)augustus, " with ", (a)tool, "? Have some pride and think this through!";
            }
          }
      ],
  has transparent proper animate;

  Object -> -> feathercap "feathered cap"
    with
      name 'feathered' 'cap',
      short_name [;
        System.InlineLinkText("examine feathered cap", "feathered cap", LINKID_FEATHERCAP);
        return true;
        ],
    has transparent;

  Object -> -> tunic "billowing tunic"
    with
      name 'clothes' 'billowing' 'tunic',
      bulky,
      short_name [;
        System.InlineLinkText("examine billowing tunic", "billowing tunic", LINKID_TUNIC);
        return true;
      ],
      description [;
        "Just about anyone would cut a dashing figure as this violet velvet tunic billowed in the breeze.";
      ],
    has clothing;

  Object -> -> codpiece "codpiece"
    with
      name 'codpiece',
      description [;
        "Comfortable, practical and stylishly stitched from violet velvet.";
      ],
      short_name [;
        System.InlineLinkText("examine codpiece", "codpiece", LINKID_CODPIECE);
        return true;
      ];

  Object -> -> lute "lute"
    with
      short_name [;
        System.InlineLinkText("examine lute", "lute", LINKID_LUTE);
        return true;
      ],
      name 'lute',
      bulky,
      before [;
        Attack:
          if (System.currentPuzzle == FIRST_PUZZLE) {
            "Attacking ", (name)augustus, "' prized ", (name)lute, "? You cannot possibly be that cruel.";
          }
        Take:
          if (lute hasnt general) {
            if (augustus has general) {
              if (lute in augustus) {
                move lute to parent(player);
                <Take lute>;
                if (lute in player) {
                  give lute general;
                  return true;
                }
                else {
                  move lute to augustus;
                  return true;
                }
              }
            }
          }
      ],
      description [;
        "It looks expensive and delicate.";
      ],
    has clothing;

  Object -> convenience
    with
      state 1,
      output [;
        switch (self.state) {
          1:
             System.BlankVorpleLineIfNoHyperlinks();
             QueueBinOutput("na_convenience_1");
             print "You draw your ";
             cloak.short_name();
             print " close against the ";
             chill.short_name();
             print " and adjust your ";
             System.InlineLink("inventory",LINKID_INVENTORY);
             print ": ", (a)harness;
             print " and ", (a)satchel;
             print ".  Time to topple a ";
             tyrant.short_name();
             print "!";
             self.state = 0;
        }
      ],
      initial [;
        self.output();
        "";
      ];

Object harness "supple satin lined weapons harness"
  class HyperLinkedItem HyperLinkedWearable HyperLinkedContainer,
  with
    bulky,
    name 'supple' 'satin' 'lined' 'weapons' 'harness',
    articles "=na_name_the_harness;The " "=na_name_the_harness;the " "=na_name_a_harness;a ",
    before [;
      Receive:
        if (~~(noun provides weapon)) {
          print "Your ";
          self.short_name();
          print " will only accomodate your weapons.^";
          return true;
        }
    ],
    short_name [;
      System.InlineLinkText("examine supple satin lined weapons harness", "supple satin lined weapons harness", LINKID_HARNESS);
      return true;
    ],
  has container worn clothing open custom_listing;

  Object -> truncheon "trusty truncheon"
    class HyperLinkedItem,
    with
      bulky,
      weapon,
      nonlethal,
      name 'trusty' 'truncheon',
      articles "=na_name_the_truncheon;The " "=na_name_the_truncheon;the " "=na_name_a_truncheon;a ",
      short_name [;
        System.InlineLinkText("examine trusty truncheon", "trusty truncheon", LINKID_TRUNCHEON);
        return true;
      ];


  Object -> knife "needle pointed knife"
    class HyperLinkedItem,
    with
      sharp,
      weapon,
      messy,
      name 'needle' 'pointed' 'knife',
      articles "=na_name_the_knife;The " "=na_name_the_knife;the " "=na_name_a_knife;a ",
      short_name [;
        System.InlineLinkText("examine needle pointed knife", "needle pointed knife", LINKID_KNIFE);
        return true;
      ];


Object cloak "woven woolen cloak"
  class HyperLinkedItem HyperLinkedWearable,
  with
  bulky,
  name 'woven' 'woolen' 'cloak',
  articles "=na_name_the_cloak;The " "=na_name_the_cloak;the " "=na_name_a_cloak;a ",
  short_name [;
    System.InlineLinkText("examine woven woolen cloak", "woven woolen cloak", LINKID_CLOAK);
    return true;
  ],
  after [;
    Disrobe:
      give cloak ~general;
  ],
  has transparent worn clothing custom_listing;

  Object hood "hood"
    class HyperLinkedWearable,
    with
      name 'hood',
      articles "=na_name_the_hood;The " "=na_name_the_hood;the " "=na_name_a_hood;a ",
      description [;
        print "It's a ";
        self.short_name();
        if (cloak in player && cloak has worn && cloak has general) {
          print " pulled low over your ";
          face.short_name();
          print " obscuring your features.";
        }
        else if (cloak in player && cloak has worn && cloak hasnt general) {
          print " hanging down around your ";
          shoulders.short_name();
          print " revealing your ";
          face.short_name();
          print " to the world.";
        }
        else {
          print ".";
        }
        print "^";
      ],
      before [;
        if (action ~= ##Wear && action ~= ##Disrobe && action ~= ##Examine && action ~= ##Interact) {
          "You cannot do much with ", (the)hood, " besides wear it or remove it.";
        }
        Wear:
          if (cloak has general && cloak has worn && cloak in actor) {
            print "You are already wearing the ";
            self.short_name();
            print ".^";
            return true;
          }
          else if (cloak has worn && cloak in actor) {
            give cloak general;
            print "You pull up the ";
            hood.short_name();
            print " around your ";
            face.short_name();
            print ", obscuring your features.^";
            return true;
          }
          else if (cloak hasnt worn) {
            "You cannot wear the ";
            hood.short_name();
            print " if you are not wearing the ";
            cloak.short_name();
            print "!^";
            return true;
          }
          else if (~~(cloak in actor)) {
            rfalse;
          }
        Disrobe:
          if (cloak hasnt general && cloak has worn && cloak in actor) {
            print "You aren't wearing the ";
            hood.short_name();
            print ".^";
            return true;
          }
          else if (cloak has worn && cloak in actor) {
            give cloak ~general;
            print "You pull down the ";
            hood.short_name();
            print " around your ";
            shoulders.short_name();
            print ", revealing your ";
            face.short_name();
            print " to the world around you.^";
            return true;
          }
          else if (cloak hasnt worn) {
            "You cannot remove the ";
            hood.short_name();
            print " if you are not wearing the ";
            cloak.short_name();
            print "!^";
            return true;
          }
          else if (~~(cloak in actor)) {
            rfalse;
          }
      ],
      short_name [;
        System.InlineLinkText("examine hood", "hood", LINKID_HOOD);
        return true;
      ],
    has scenery clothing custom_listing worn;

Object reputation "reputation"
  class HyperLinkedItem HyperLinkedWearable,
    with
      bulky,
      name 'reputation',
      articles "=na_name_the_reputation;The " "=na_name_the_reputation;the " "=na_name_a_reputation;a ",
      short_name [;
        System.InlineLinkText("examine reputation", "reputation", LINKID_REPUTATION);
        return true;
      ],
      before [;
        Disrobe:
          "Remove your reputation? Unthinkable! What wouldn't people say?";
      ],
      has worn clothing custom_listing;

Object satchel "slim leather satchel"
  class HyperLinkedItem HyperLinkedOpenable HyperLinkedWearable HyperLinkedContainer,
  with
  specialSeal,
  name 'slim' 'leather' 'satchel',
  articles "=na_name_the_satchel;The " "=na_name_the_satchel;the " "=na_name_a_satchel;a ",
  na_article_names "na_name_the_satchel" "na_name_the_satchel" "na_name_a_satchel",
  before [;
    Receive:
      if (noun provides bulky) {
        print "The ";
        noun.short_name();
        print " is too bulky to fit in the ";
        self.short_name();
        print "^";
        return true;
      }
      if (noun provides sharp) {
        print "The ";
        noun.short_name();
        print " would damage the ";
        self.short_name();
        print " if put in there.^";
        return true;
      }

  ],
  short_name [nolink;
    if (nolink) {
      print "slim leather satchel";
      return true;
    }
    System.InlineLinkText("examine slim leather satchel", "slim leather satchel", LINKID_SATCHEL);
    return true;
  ],
  has container openable ~open worn clothing custom_listing;

Object -> pellet "blue-black bottle"
  class HyperLinkedItem,
  with
    name 'blue' 'black' 'blue-black' 'bottle',
    articles "=na_name_the_pellet;The " "=na_name_the_pellet;the " "=na_name_a_pellet;a ",
    description "Don't eat it by accident.",
    short_name [;
      System.InlineLinkText("examine grim green poison pellet", "grim green poison pellet", LINKID_PELLET);
      return true;
    ],
  has
    edible;

Object -> card "laminated parchment card"
  class HyperLinkedItem,
  with
    name 'laminated' 'parchment' 'card',
    articles "=na_name_the_card;The " "=na_name_the_card;the " "=na_name_a_card;a ",
    description "It's a license to lie.",
    short_name [;
      System.InlineLinkText("examine laminated parchment card", "laminated parchment card", LINKID_CARD);
      return true;
    ];

Object -> charge "peril powder charge"
  class HyperLinkedItem,
  with
    countdown 3,
    name 'peril' 'powder' 'charge',
    articles "=na_name_the_charge;The " "=na_name_the_charge;the " "=na_name_a_charge;a ",
    description [;
      "Explosive.";
    ],
    short_name [;
      System.InlineLinkText("examine peril powder charge", "peril powder charge", LINKID_CHARGE);
      return true;
    ],
    TickTock [;
      if (self.countdown > 0) {
        self.countdown--;
      }
      if (self.countdown <= 0) {
        self.Explode();
        remove self;
      }
    ],
    Explode [l h d gz ml lat lon;
      lat = "";
      lon = "";
      gz = charge;
      ml = real_location;
      while (parent(gz) ~= nothing) gz = parent(gz);
      while (parent(ml) ~= nothing) ml = parent(ml);
      if (gz provides x && ml provides x && gz provides y && ml provides y) {
        l = gz.x - ml.x;
        if (l < 0) lat = "west";
        else if (l > 0) lat = "east";
        l = l * l;
        h = gz.y - ml.y;
        if (h < 0) lon = "south";
        else if (h > 0) lon = "north";
        h = h * h;
        d = SquareRoot(l + h);

        switch (d) {
          0:
            deadflag = 1;
            print "BOOM! ";
            "Dead now.";
          1:
            PrintStringOrArray(lon);
            PrintStringOrArray(lat);
            "A deafening explosion.";
          2:
            PrintStringOrArray(lon);
            PrintStringOrArray(lat);
            "A loud explosion.";
          3:
            PrintStringOrArray(lon);
            PrintStringOrArray(lat);
            "A distant explosion";
          default:
            PrintStringOrArray(lon);
            PrintStringOrArray(lat);
            "A low distant rumble.";
        }
      }
      else {
        "Strange.  You don't hear a detonation.";
      }
    ];

Object -> vial "glaes faeflask"
  class  VesselClass DelicateClass HyperLinkedItem HyperLinkedOpenable HyperLinkedContainer,
  with
    specialSeal,
    name 'sealed' 'unsealed' 'glaes' 'faeflask' 'flask',
    articles "=na_name_the_vial;The " "=na_name_the_vial;the " "=na_name_a_vial;a ",
    description "Smooth and dark.",
    short_name [;
      System.InlineLinkText("examine glaes faeflask", "glaes faeflask", LINKID_FAEFLASK);
      rtrue;
    ],
  has
    ~open openable;

Object sleeve "sleeve"
  with
    name 'sleeve',
    description "Some people look casually charming when they fiddle with their sleeve.  You? Not so much.",
    short_name [;
      System.InlineLinkText("examine my sleeve", "sleeve", LINKID_SLEEVE);
      return true;
    ],
    before [;
      action = ##Examine;
    ],
  has scenery worn custom_listing;

Object shoulders "shoulders"
  with
    name 'shoulders' 'shoulder',
    description "Broad and strong.  The Order trains you well.",
    parse_name [ w1 w2;
      w1 = NextWord(); w2 = NextWord();
      if(w1 == 'left' && w2 == 'shoulder') return 2;
      if(w1 == 'right' && w2 == 'shoulder') return 2;
      if(w1 == 'shoulder' && w2 == 0) return 1;
      if(w1 == 'shoulders' && w2 == 0) return 1;
    ],
    short_name [;
      System.InlineLinkText("examine my shoulders", "shoulders", LINKID_SHOULDERS);
      return true;
    ],
  has scenery pluralname;

Object face "face"
  with
    name 'face',
    description "A smooth and unlined forehead crowns eyes of unquenchable fire.  Or so you've been told.",
    short_name [;
      System.InlineLinkText("examine my face", "face", LINKID_FACE);
      return true;
    ],
  has scenery;

Object body "body"
  with
    name 'body',
    description "Slim, trim and covered in horrific scars that never cease to writhe and itch.",
    short_name [;
      System.InlineLinkText("examine my body", "body", LINKID_BODY);
      return true;
    ],
  has scenery;

Object back "back"
  with
    name 'back',
    description "Still aching from this morning's grueling training session.",
    short_name [;
      System.InlineLinkText("examine my back", "back", LINKID_BACK);
      return true;
    ],
  has scenery;

Object hands "hands"
  with
    name 'hands' 'hand',
    description [;
      "Calloused and deft with no small amount of ", (name)blood, " on them.  Metaphorically speaking, of course.";
    ],
    short_name [;
      System.InlineLinkText("examine my hands", "hands", LINKID_HANDS);
      return true;
    ],
  has scenery pluralname;

Object blood "blood"
  with
    name 'blood',
    description [;
      "The ", (name)blood, " on your ", (name)hands, " is metaphorical.  They are actually quite clean.";
    ],
    short_name [;
      System.InlineLinkText("examine blood", "blood", LINKID_BLOOD);
      return true;
    ],
  has scenery;

Object narrator "narrator"
  with
    name 'narrator',
    before [;
      QueueBinOutput("na_msg_narrator_interaction");
      "Don't be silly - you can't interact with me directly.";
    ],
  has scenery;

Object chill "chill"
  with
    name 'chill',
    description [;
      print "It's ";
      System.InlineLinkText("examine chill", "chilly", LINKID_CHILL);
      print ".^";
    ],
    before [;
      if (action == ##Examine) {
          return false;
      }
      else {
        "Don't let the cold distract you.  Focus on the task at hand.";
      }
    ],
    short_name [;
      System.InlineLinkText("examine chill", "chill", LINKID_CHILL);
      return true;
    ],
  has scenery;

Object tyrant "tyrant"
  with
    name 'tyrant',
    description [;
      print "It's ";
      self.short_name();
      print ".^";
    ],
    before [;
      if (action == ##Examine) {
          return false;
      }
      else {
        "Talk is cheap.  What are you actually going to do about the tyrant?";
      }
    ],
    short_name [;
      System.InlineLinkText("examine tyrant", "tyrant", LINKID_TYRANT);
      return true;
    ],
  has scenery;
