Constant Story "The Uninvited Opera of Augustus Interruptus";
Constant Headline "^Written and directed by Joshua Wilson^";
Array UUID_ARRAY static string "UUID://b72c87a5-f92e-4f07-b3e7-ba4b5243611a//";
Release 1;

Attribute custom_listing;

!-----------------------------------------------------------------------------
!
! This file is a test suite for Inform Markup.  For more information on
! Inform Markup, see the header commentary in the file Markup.h.
!
! Here's a suitable PIC1 file for image tests:
!
! begin 664 PIC1
! MB5!.1PT*&@H````-24A$4@```"`````@`@,````.%))G````#%!,5$4```#.
! MSJ/DYOS__]UOK-:X````H$E$051XG'7/L0K",!0%T`NA%+(X.6?O/TBEHXLN
! MG?V4ULG?2+:0KW!S5>N'9.C8<LTK%:KBFPZ\R\T+PCQ8PO^@U7]7I_<JKR;8
! MPCQLD9!MRYA5`=X\F_YX"[`<S9U#`4?NKQPG=&9&+&?TC<"2`R7L&T$O/8+4
! M$W(`*C6'EBFB$UP$-O*H79$7@2/4*#B#@]HMPWY=UX?IYA;07W__Q`NHM)Z\
! 0,;6D%`````!)14Y$KD)@@@``
! `
! end
!
!-----------------------------------------------------------------------------

Constant MAX_CARRIED = 2;
Include "vorple.h";
Include "uoai-parser.h";
Include "uoai-verblib.h";
Include "infglk.h";
Include "markup.h";
Include "uoai-vorple-multimedia.h";
Include "vorple-hyperlinks.h";
Include "vorple-screen-effects.h";

[ ChooseObjects obj code
  retval;
  obj = obj;          ! Avoid a compiler warning
  switch (code) {
      0:              ! Parser is excluding obj from ALL
          ;           ! ... accept parser's decision
      1:              ! Parser is including obj in ALL
          if (action_to_be == ##Take || action_to_be == ##Drop) retval = 2;
                      ! ... force exclusion if TAKE; accept otherwise
      2:              ! Parser is asking for 'appropriateness' hint
          ;           ! ... but we don't provide one
      }
  return retval;
];

[ AfterRestore;
  ClearNarration();
  VorpleStopAudio();
  System.SyncBrowserAudioExtension();
  QueueBinOutput("na_msg_restoresuccessful");
  QueueBinOutput("se_pause");
  print "Restore successful!^";
  System.FlushBinOrTTSIfNarrationEnabled();
  System.Pause();
  ClearNarration();
  VorpleStopAudio();
];

[ ClearNarration;
  VorpleExecuteJavaScriptCommand("CancelTTS();");
  VorpleStopMusic();
  VorpleClearPlaylist();
];

[ CompareStrings bufA bufB
    i;
    if (bufA-->0 ~= bufB-->0) rfalse;
    for (i=0 : i<bufA-->0 : i++) {
        if ((bufA->(i+WORDSIZE)) ~= (bufB->(i+WORDSIZE))) rfalse;
      }
    rtrue;
];

[ StringToLower bufA
    i;
    for (i=0 : i<bufA-->0 : i++) {
        if ((bufA->(i+WORDSIZE)) >= 'A' && (bufA->(i+WORDSIZE)) <= 'Z') {
          (bufA->(i+WORDSIZE)) = (bufA->(i+WORDSIZE))-('A' - 'a');
        }
      }
    rtrue;
];

[ BeforeParsing;
  ClearNarration();
];

[ AfterPrompt;
  if (System.audioEnabled == 0) {
    ClearNarration();
  }
  else {
    if (~~VorpleIsASoundEffectPlaying()) {
      System.RestartBackgroundLoop();
    }
    switch (action) {
      ##Look:
      ##Examine:
      ##Inv:
      ##Go:
      default:
          VorpleExecuteJavaScriptCommand("CancelBin();");
    }
    VorpleExecuteJavaScriptCommand("FlushBinOrTTS();");
  }
];

[ HandleGlkEvent ev context abortres newcmd cmdlen;
  if (isVorpleSupported()) {
  }
  else {
    switch (ev-->0)
    {
    evtype_hyperlink:
      glk_request_hyperlink_event(gg_mainwin);
      glk_set_style(style_Input);
      switch (ev-->2) {
        LINKID_YES: newcmd = "Yes";
        LINKID_NO: newcmd = "No";
        LINKID_HERO: newcmd = "Hero";
        LINKID_HEROINE: newcmd = "Heroine";
        LINKID_HERETIC: newcmd = "Heretic";
        LINKID_HELLION: newcmd = "Hellion";
        LINKID_HONEYBADGER: newcmd = "Honeybadger";
        LINKID_CONTINUE: newcmd = "";
        LINKID_NEW: newcmd = "New";
        LINKID_RESTORE: newcmd = "Restore";
        LINKID_COLOR: newcmd = "Color";
        LINKID_CLOAK: newcmd = "examine woven woolen cloak";
        LINKID_HARNESS: newcmd = "examine supple satin lined weapons harness";
        LINKID_SATCHEL: newcmd = "examine slim leather satchel";
        LINKID_TRUNCHEON: newcmd = "examine trusty truncheon";
        LINKID_KNIFE: newcmd = "examine needle pointed knife";
        LINKID_HOOD: newcmd = "examine hood";
        LINKID_PELLET: newcmd = "examine grim green poison pellet";
        LINKID_FAEFLASK: newcmd = "examine glaes faeflask";
        LINKID_CHARGE: newcmd = "examine peril powder charge";
        LINKID_SHOULDERS: newcmd = "examine my shoulders";
        LINKID_FACE: newcmd = "examine my face";
        LINKID_BODY: newcmd = "examine my body";
        LINKID_BACK: newcmd = "examine my back";
        LINKID_HOOD: newcmd = "examine hood";
        LINKID_CARD: newcmd = "examine laminated parchment card";

        default: newcmd = 0;
      }
      if (newcmd ~= 0) {
    		PrintStringOrArray(newcmd);
    		glk_set_style(style_Normal);
    		glk_cancel_line_event(gg_mainwin,0);
    		cmdlen=PrintAnyToArray(abortres+WORDSIZE,INPUT_BUFFER_LEN-WORDSIZE,newcmd);
    		abortres-->0=cmdlen;
    		return 2;
      }
    }
  }
];

Include "grammar.h";
Include "uoai-alchemy.inf";

Extend 'inventory' replace
    *                                           -> UOAIInv
    * 'tall'                                    -> EasterEgg
    * 'wide'                                    -> EasterEgg;

[IsHood;
  return (noun == hood && TestScope(player,hood));
];
Extend 'wear' first
    * noun=IsHood                               -> Wear;
Extend 'take'
    * 'off' noun=IsHood                         -> Disrobe;
Extend 'disrobe'
    * noun=IsHood                               -> Disrobe;
Extend 'remove' first
    * noun=IsHood                               -> Disrobe;

[PlayerAddToScope;
  PlaceInScope(shoulders);
  PlaceInScope(face);
  PlaceInScope(body);
  PlaceInScope(back);
];

[GetFirstListedInventory o;
  objectloop(o in actor) {
    if (o hasnt custom_listing) return o;
  }
  return 0;
];

[InvHarnessContents;
  if (truncheon in harness && knife in harness) {
    print " which secures ", (a)truncheon, " and ", (a)knife, " tightly at the small of your ";
    back.short_name();
    print ".  ";
  }
  else if (truncheon in harness) {
    print " which secures ", (a)truncheon, " tightly at the small of your ";
    back.short_name();
    print ".  ";
  }
  else if (knife in harness) {
    print " which secures ", (a)knife, " tightly at the small of your ";
    back.short_name();
    print ".  ";
  }
  else {
    print ".  The harness is empty.  ";
  }
];
[InvDescribeHood;
  if (cloak has general) {
    print "The ";
    hood.short_name();
    print " of the ";
    cloak.short_name();
    print " is pulled low over your ";
    face.short_name();
    print ", obscuring your features.  ";
  }
  else {
    print "The ";
    hood.short_name();
    print " of the ";
    cloak.short_name();
    print " hangs down around your ";
    shoulders.short_name();
    print ", revealing your ";
    face.short_name();
    print " to the world.  ";
  }
];

[UOAIInvSub output harnessDescribed cloakDescribed satchelDescribed;
  if (harness in actor) {
    if (harness has worn) {
      if (cloak in actor && cloak has worn) {
        print (A)cloak, " conceals ", (a)harness;
        harnessDescribed = 1;
        cloakDescribed = 1;
        InvHarnessContents();
        InvDescribeHood();
      }
      else {
        harnessDescribed = 1;
        print "You wear ", (a)harness;
        InvHarnessContents();
        InvDescribeHood();
      }
    }
  }
  if (cloakDescribed ~= 1) {
    if (cloak in actor) {
      if (cloak has worn) {
        print "You are wearing a woven woolen cloak.  ";
        cloakDescribed = 1;
        InvDescribeHood();
      }
    }
  }
  if (satchel in actor) {
    if (satchel has worn) {
      print (A)satchel, " hangs loosely across your ";
      body.short_name();
      print " from your left ";
      System.InlineLinkText("examine my shoulders","shoulder",LINKID_SHOULDERS);
      print ".";
      satchelDescribed = 1;
    }
  }
  if (harnessDescribed || cloakDescribed || satchelDescribed) {
    print "^^";
  }
  if (harness hasnt worn) give harness ~custom_listing;
  if (cloak hasnt worn) give cloak ~custom_listing;
  if (satchel hasnt worn) give satchel ~custom_listing;
  InvSub();
  if (harness hasnt worn) give harness custom_listing;
  if (cloak hasnt worn) give cloak custom_listing;
  if (satchel hasnt worn) give satchel custom_listing;
];

[EasterEggSub;
  System.codeNameLinkId = LINKID_HACKER;
  "You discovered the super secret command! I hereby dub thee ~Hacker~.^";
];


Constant AUDIOEXT_OGG 0;
Constant AUDIOEXT_MP3 1;
Constant AUDIOEXT_NULL 2;

Array INPUT_QUIT buffer "quit";
Array INPUT_NEW buffer "new";
Array INPUT_RESTART buffer "restart";
Array INPUT_RESTORE buffer "restore";
Array INPUT_COLOR buffer "color";

Array CODENAME_HERO buffer "hero";
Array CODENAME_HEROINE buffer "heroine";
Array CODENAME_HERETIC buffer "heretic";
Array CODENAME_HELLION buffer "hellion";
Array CODENAME_HONEYBADGER buffer "honeybadger";
Array CODENAME_HACKER buffer "hacker";

Constant LINKID_YES 1;
Constant LINKID_NO 2;
Constant LINKID_HERO 3;
Constant LINKID_HEROINE 4;
Constant LINKID_HERETIC 5;
Constant LINKID_HELLION 6;
Constant LINKID_HONEYBADGER 7;
Constant LINKID_CONTINUE 8;
Constant LINKID_NEW 9;
Constant LINKID_RESTORE 10;
Constant LINKID_COLOR 11;
Constant LINKID_HACKER 12;
Constant LINKID_CLOAK 13;
Constant LINKID_HARNESS 14;
Constant LINKID_SATCHEL 15;
Constant LINKID_TRUNCHEON 16;
Constant LINKID_KNIFE 17;
Constant LINKID_HOOD 18;
Constant LINKID_PELLET 19;
Constant LINKID_FAEFLASK 20;
Constant LINKID_CHARGE 21;
Constant LINKID_SHOULDERS 22;
Constant LINKID_FACE 23;
Constant LINKID_BODY 24;
Constant LINKID_BACK 25;
Constant LINKID_CARD 26;

Object System
  with
    audioEnabled 0,
    audioExt AUDIOEXT_NULL,
    codeNameLinkId 0,
    currentBackgroundLoop 0,
    disableGuessing 1,
    SetCurrentBackgroundLoop [ f;
      self.currentBackgroundLoop = f;
    ],
    FlushBinOrTTSIfNarrationEnabled [;
      if (self.audioEnabled) {
        VorpleExecuteJavaScriptCommand("FlushBinOrTTS();");
      }
    ],
    RestartBackgroundLoop [ f delay;
      VorpleStopSoundEffects();
      if (self.audioEnabled) {
        if (f == 0 && currentBackgroundLoop ~= 0)
          f = self.currentBackgroundLoop;
        if (f ~= 0)
          VorplePlaySoundEffect(f,true,delay);
      }
    ],
    SyncBrowserAudioExtension [;
      switch (self.audioExt) {
        AUDIOEXT_OGG:
          VorpleExecuteJavaScriptCommand("document.audioExt = 'ogg';");
        AUDIOEXT_MP3:
          VorpleExecuteJavaScriptCommand("document.audioExt = 'mp3';");
        default:
          VorpleExecuteJavaScriptCommand("document.audioExt = null;");
      }
    ],
    SyncSystemAudioExtension [ tmp;
      VorpleExecuteJavaScriptCommand("return IsPlayingMP3s();");
      tmp = VorpleWhatNumberWasReturned();
      if (tmp == 1) {
        self.audioExt = AUDIOEXT_MP3;
      }
      else {
        VorpleExecuteJavaScriptCommand("return IsPlayingOGGs();");
        tmp = VorpleWhatNumberWasReturned();
        if (tmp == 1) {
          self.audioExt = AUDIOEXT_OGG;
        }
        else {
          self.audioExt = AUDIOEXT_NULL;
        }
      }
    ],
    StandardPrompt [;
      VorpleExecuteJavaScriptCommand("vorple.prompt.setPrefix('>')");
      bp_output_stream(3, current_prompt, BUFLEN-1);
      print "???";
      bp_output_stream(-3);
    ],
    BlankPrompt [;
      VorpleExecuteJavaScriptCommand("vorple.prompt.setPrefix('')");
      bp_output_stream(3, current_prompt, BUFLEN-1);
      print "";
      bp_output_stream(-3);
    ],
    ClearNonIpadScreen [ ipad;
      if (isVorpleSupported()) {
        VorpleExecuteJavaScriptCommand("return IsIpad();");
        ipad = VorpleWhatNumberWasReturned();
        if (ipad == 0) {
          VorpleExecuteJavaScriptCommand("$('#window0 *:not(.turn.current), .turn.current').empty()");
        }
      }
      else {
        ClearScreen();
      }
    ],
    MsgYesOrNo [;
      print "Please answer ";
      self.InlineLink("Yes",LINKID_YES);
      print " or ";
      self.InlineLink("No",LINKID_NO);
      print ".";
    ],
    InlineLink [ text id;
      if (isVorpleSupported()) {
        VorpleLinkCommand(text);
      }
      else if (glk_gestalt(gestalt_Hyperlinks, 0) && id > 0) {
        glk_set_hyperlink(id);
        PrintStringOrArray(text);
        glk_set_hyperlink(0);
      }
      else {
        PrintStringOrArray(text);
      }
    ],
    InlineLinkText [ cmd text id;
      if (isVorpleSupported()) {
        VorpleLinkCommandText(cmd, text);
      }
      else if (glk_gestalt(gestalt_Hyperlinks, 0) && id > 0) {
        glk_set_hyperlink(id);
        PrintStringOrArray(text);
        glk_set_hyperlink(0);
      }
      else {
        PrintStringOrArray(text);
      }
    ],
    WaitForEnter [;
      self.BlankPrompt();
      KeyboardPrimitive(buffer, parse);
      self.StandardPrompt();
      return parse;
    ],
    Pause [;
      if (isVorpleSupported()) {
        VorpleImage("continue.png", "CLICK TO CONTINUE", IMAGE_RIGHT_ALIGNED, 0, "");
      }
      else {
        glk_set_hyperlink(LINKID_CONTINUE);
        print (markup) "<IMG SRC=101 ALIGN='RIGHT' ALT='CLICK TO CONTINUE' WIDTH=240 HEIGHT=43><br>";
        glk_set_hyperlink(0);
      }
      self.WaitForEnter();
      VorpleExecuteJavaScriptCommand("try { document.getElementById(document.currentContinueId).style.display=~none~ } catch(e) {};");
    ],
    GetCodename [ raw;
      switch (self.codeNameLinkId) {
        LINKID_HERO: if (raw) return CODENAME_HERO; return "Hero";
        LINKID_HEROINE: if (raw) return CODENAME_HEROINE; return "Heroine";
        LINKID_HERETIC: if (raw) return CODENAME_HERETIC; return "Heretic";
        LINKID_HELLION: if (raw) return CODENAME_HELLION; return "Hellion";
        LINKID_HONEYBADGER: if (raw) return CODENAME_HONEYBADGER; return "Honeybadger";
        default: if (raw) return CODENAME_HACKER; return "Hacker";
      }
    ],
    GraceNote [ channel;
      if (isVorpleSupported()) {
        VorpleImage("gracenotes.png", "MUSICAL INTERLUDE");
      }
      else {
        print (markup) "<IMG SRC=100 ALT='MUSICAL INTERLUDE' WIDTH=500 HEIGHT=30><br>";
      }
    ];

[ Initialise o;
    location = clearing;
    inventory_style = FULLINV_BIT + ENGLISH_BIT;
    no_implicit_actions = true;
    glk_request_hyperlink_event(gg_mainwin);
    VorpleInitialise();
    VorpleStopAudio();

    objectloop(o provides articles) {
      if (isVorpleSupported() == 0) {
        o.&articles-->0 = "The ";
        o.&articles-->1 = "the ";
        o.&articles-->2 = "a ";
      }
    }

    move satchel to player;
    move cloak to player;
    move harness to player;
    player.add_to_scope = PlayerAddToScope;
];

[ TestMode;
  System.audioEnabled = 1;
  System.SyncSystemAudioExtension();
  System.codeNameLinkId = LINKID_HERO;
  System.SetCurrentBackgroundLoop("music_loop_1");
  ClearNarration();
];

[ InitialQuery tmp;
  print "^It's a good thing that foul play is your forte.  Otherwise, your twilight mission to topple a tyrant (while a second-rate songsmith intrusively observes) may not end well...^^";

  VorpleStyle(STYLE_EMPHASIS);
  print (markup) "<U>DIRECTOR'S NOTE:^This game supports clickable command words highlighted in this ";
  System.InlineLink("Color",LINKID_COLOR);
  print (markup) " as well as traditional typed commands.</U>^^";
  VorpleEndStyle();
  print "Please enter or select ";
  System.InlineLink("New",LINKID_NEW);
  print " to start a new game, or ";
  System.InlineLink("Restore",LINKID_RESTORE);
  print (markup) " to resume a previously saved session.</U>";
  tmp = 0;
  while (tmp == 0) {
    Keyboard(buffer, parse);
    StringToLower(buffer);
    if (CompareStrings(buffer,INPUT_COLOR)) {
      print "Don't be silly.  ";
      System.InlineLink("Color",LINKID_COLOR);
      print " is just an example, not a valid command.^";
    }
    if (CompareStrings(buffer,INPUT_RESTORE) || CompareStrings(buffer,INPUT_NEW)) {
      if (CompareStrings(buffer,INPUT_RESTORE)) {
        tmp = 0;
        RestoreSub();
        print "^Please enter ";
        System.InlineLink("New",LINKID_NEW);
        print " to start a new game, or ";
        System.InlineLink("Restore",LINKID_RESTORE);
        print " to resume a previously saved session.^";
      }
      else {
        tmp = 1;
      }
    }
    else {
      print "^Please enter ";
      System.InlineLink("New",LINKID_NEW);
      print " to start a new game, or ";
      System.InlineLink("Restore",LINKID_RESTORE);
      print " to resume a previously saved session.^";
    }
  }
];

[ InteractiveIntroduction tmp v key;
  key = 0;
  System.StandardPrompt();
  if (isVorpleSupported()) {
    VorpleExecuteJavaScriptCommand("return IsTTSSupported();");
    tmp = VorpleWhatNumberWasReturned();
    if (tmp == 1) {
      v = true;
      !FIXME add a compelling and funny first line
      !return TestMode();
      InitialQuery();
      print "^Would you like to enable audio? ";
      System.MsgYesOrNo();
      System.audioEnabled = YesOrNo();
      if (System.audioEnabled) {
        ClearNarration();
        QueueBinOutput("na_intro_1");
        print "^";
        print "NARRATOR:^";
        print "Oh dear - such dreadful weather.  Do you hear me speaking right now? (";
        System.InlineLink("Yes",LINKID_YES);
        print " or ";
        System.InlineLink("No",LINKID_NO);
        print ")^";
        System.FlushBinOrTTSIfNarrationEnabled();
        tmp = YesOrNo();
        if (tmp) {
          System.SyncSystemAudioExtension();
        }
        else {
          VorpleExecuteJavaScriptCommand("ToggleAudioExtension();");
          ClearNarration();
          QueueBinOutput("na_intro_1b");
          print "^";
          print "Oh, how about now then? (";
          System.InlineLink("Yes",LINKID_YES);
          print " or ";
          System.InlineLink("No",LINKID_NO);
          print ")^";
          System.FlushBinOrTTSIfNarrationEnabled();
          tmp = YesOrNo();
          if (tmp) {
            System.SyncSystemAudioExtension();
          }
        }
        if (tmp) {
          ClearNarration();
          QueueBinOutput("na_intro_1c");
          QueueBinOutput("se_pause");
          QueueBinOutput("na_intro_1d");
          QueueBinOutput("se_pause");
          print "^";
          !FIXME implement SOUND ON / SOUND OFF
          print "During the game, you may toggle the audio with the Sound On or Sound Off commands.  Meanwhile, if you see the continue symbol or hear the report of musical drums...you should press the enter key or tap continue when ready to proceed.^";
          System.FlushBinOrTTSIfNarrationEnabled();
          System.Pause();
          ClearNarration();
          QueueBinOutput("na_intro_2");
          QueueBinOutput("se_pause");
          print "^";
          print "On occasion, the game may employ miraculous text-to-speech technology to read some words aloud.^";
          System.FlushBinOrTTSIfNarrationEnabled();
          System.Pause();
          ClearNarration();
          print "^This is some sample text-to-speech.  Would you like to customize the voice? (";
          System.InlineLink("Yes",LINKID_YES);
          print " or ";
          System.InlineLink("No",LINKID_NO);
          print ")^";
          System.FlushBinOrTTSIfNarrationEnabled();
          tmp = YesOrNo();
          if (tmp) {
            ClearNarration();
            print "^So would I.  Alas, not today.  Enjoy the game!";
            PunctuateTTS();
            System.FlushBinOrTTSIfNarrationEnabled();
            key = 1;
          }
          else {
            ClearNarration();
            QueueBinOutput("na_intro_3");
            QueueBinOutput("se_pause");
            print "^";
            print "Excellent.  You are ready to begin.  Enjoy the game!^";
            System.FlushBinOrTTSIfNarrationEnabled();
            key = 1;
          }
        }
        else {
          ClearNarration();
          print "Never mind about the audio then.  During the game, you may toggle the audio with the Sound On or Sound Off commands.  Meanwhile, if you see the continue symbol you should press the enter key or tap continue when ready to proceed.";
          key = 1;
          System.audioEnabled = 0;
        }
      }
      else {
        print "^During the game, you may toggle the audio with the Sound On or Sound Off commands.  Meanwhile, if you see the continue symbol you should press the enter key or tap continue when ready to proceed.";
        key = 1;
      }
    }
    else {
      v = false;
    }
  }
  else {
    v = false;
  }
  if (v == false) {
    !return TestMode();
    InitialQuery();

    print "^NARRATOR:^";
    print "Please note that this version of the game has no audio.  When you see the continue symbol, tap it or press enter to proceed.  Enjoy the game!^^";
    key = 1;
  }
  if (key == 1) {
    System.Pause();
  }
  ClearNarration();
  print "^^";
  System.ClearNonIpadScreen();
  VorpleStopAudio();

  !FIXME Improve concision and humor
  if (isVorpleSupported()) {
    VorpleImage("title.png", "The Uninvited Opera Of Augustus Interruptus");
  }
  else {
    print (markup) "<IMG SRC=102 ALT='The Uninvited Opera of Augustus Interruptus'<br>";
    print "^";
  }

  QueueBinOutput("na_prologue_1");
  print "^";
  print "NARRATOR:^";
  print "Your people have known nothing but tyranny for one thousand years.  Healthcare is free, yes, but only for ones who are sick! Pointless war and carnage is long forbidden, blanching the countryside with the sickly pallor of peace and prosperity.  And worst of all, excessive overdue library fines - pennies per day! All that changes tonight, and you shall be the changer!^";
  print "^Yet no one shall ever know your name.  Indeed, if you even have a true name it is lost to time.  You were raised by the Order of Humble Pride, a cabal of freedom fighters masquerading as learned monks.  'Twas twenty-four years ago they found you abandoned at the gates and assigned to you your nom de guerre - a code name otherwise known only to the elders.^";
  print "^What was it again? Something that started with H I believe. ";
  System.InlineLink("Hero",LINKID_HERO);
  print "? ";
  System.InlineLink("Heroine",LINKID_HEROINE);
  print "? ";
  System.InlineLink("Heretic",LINKID_HERETIC);
  print "? ";
  System.InlineLink("Hellion",LINKID_HELLION);
  print "? ";
  print "Or perhaps ";
  System.InlineLink("Honeybadger",LINKID_HONEYBADGER);
  print "? You can tell me.  I'm the narrator, after all.^";
  System.FlushBinOrTTSIfNarrationEnabled();
  if (true) {
    tmp = false;
    while (tmp == false) {
      Keyboard(buffer, parse);
      StringToLower(buffer);

      if (CompareStrings(buffer,CODENAME_HERO) || CompareStrings(buffer,CODENAME_HEROINE)) {
        tmp = true;
      }
      else if (CompareStrings(buffer,CODENAME_HERETIC)) {
        tmp = true;
      }
      else if (CompareStrings(buffer,CODENAME_HELLION)) {
        tmp = true;
      }
      else if (CompareStrings(buffer,CODENAME_HONEYBADGER)) {
        tmp = true;
      }
      else {
        ClearNarration();
        QueueBinOutput("na_prologue_1_rejection");
        print "^No no no, it can't be that.  Please enter ";
        System.InlineLink("Hero",LINKID_HERO);
        print ", ";
        System.InlineLink("Heroine",LINKID_HEROINE);
        print ", ";
        System.InlineLink("Heretic",LINKID_HERETIC);
        print ", ";
        System.InlineLink("Hellion",LINKID_HELLION);
        print ", or ";
        System.InlineLink("Honeybadger",LINKID_HONEYBADGER);
        print ".^";
        System.FlushBinOrTTSIfNarrationEnabled();
      }
    }
    System.SetCurrentBackgroundLoop("music_loop_1");
    System.RestartBackgroundLoop(0,250);
    ClearNarration();
    QueueBinOutput("na_prologue_1_ahyes");
    print "^Ah yes - ";
    if (CompareStrings(buffer,CODENAME_HERO) || CompareStrings(buffer,CODENAME_HEROINE)) {
      if (CompareStrings(buffer,CODENAME_HERO)) {
        System.codeNameLinkId = LINKID_HERO;
        QueueBinOutput("na_prologue_1_hero");
        print "Hero! ";
      }
      else {
        System.codeNameLinkId = LINKID_HEROINE;
        QueueBinOutput("na_prologue_1_heroine");
        print "Heroine! ";
      }
      QueueBinOutput("na_prologue_1_hero_fate");
      QueueBinOutput("na_prologue_1_wait");
      QueueBinOutput("se_pause");
      print "Destined to save your nation and change the world! Wait, I'm sorry.  Do you hear that? It sounds like someone is playing a lute - and poorly, I might add...^";
      System.FlushBinOrTTSIfNarrationEnabled();
    }
    else if (CompareStrings(buffer,CODENAME_HERETIC)) {
      System.codeNameLinkId = LINKID_HERETIC;
      QueueBinOutput("na_prologue_1_heretic");
      QueueBinOutput("na_prologue_1_heretic_fate");
      QueueBinOutput("na_prologue_1_wait");
      QueueBinOutput("se_pause");
      print "Heretic! Ever ready to trample the trappings of fear and falsehood beneath your two bare feet.  Wait, I'm sorry.  Do you hear that? It sounds like someone is playing a lute - and poorly, I might add...^";
      System.FlushBinOrTTSIfNarrationEnabled();
    }
    else if (CompareStrings(buffer,CODENAME_HELLION)) {
      System.codeNameLinkId = LINKID_HELLION;
      QueueBinOutput("na_prologue_1_hellion");
      QueueBinOutput("na_prologue_1_hellion_fate");
      QueueBinOutput("na_prologue_1_wait");
      QueueBinOutput("se_pause");
      print "Hellion! Relentlessly spitting in the face of fickle fate! Wait, I'm sorry.  Do you hear that? It sounds like someone is playing a lute - and poorly, I might add...^";
      System.FlushBinOrTTSIfNarrationEnabled();
    }
    else if (CompareStrings(buffer,CODENAME_HONEYBADGER)) {
      System.codeNameLinkId = LINKID_HONEYBADGER;
      QueueBinOutput("na_prologue_1_honeybadger");
      QueueBinOutput("na_prologue_1_honeybadger_fate");
      QueueBinOutput("na_prologue_1_wait");
      QueueBinOutput("se_pause");
      print "Honeybadger! The soul of a wolverine in the body of a...wolverinish...badger body! Wait, I'm sorry.  Do you hear that? It sounds like someone is playing a lute - and poorly, I might add...^";
      System.FlushBinOrTTSIfNarrationEnabled();
    }
  }
  System.Pause();
  ClearNarration();
];

[ QueueBinOutput f;
  if (isVorpleSupported()) {
    print "=";
    PrintStringOrArray(f);
    print ";";
  }
];

[ PunctuateTTS;
  if (isVorpleSupported()) {
    print "=!;^";
  }
];

Object clearing "Shadowy Clearing..."
  with
    short_name [;
      print "Our ";
      PrintStringOrArray(System.GetCodeName());
      !bp_output_stream(3, hugehugestr, LEN_HUGEHUGESTR);
      !print "na_prologue_1_";
      !PrintStringOrArray(System.GetCodename(true));
      !bp_output_stream(-3);
      !QueueBinOutput(hugehugestr);
      !QueueBinOutput("na_room_clearing");
      print " Lingered in a ";
    ],
    description [;
      !QueueBinOutput("na_desc_clearing");
      "You are in a shadowy clearing.";
    ],
    before [;
      Jump:
        VorpleStopSoundEffects();
        QueueBinOutput("na_msg_jump");
        print "Everything falls silent.^";
        System.FlushBinOrTTSIfNarrationEnabled();
        rtrue;
      Sing:
        QueueBinOutput("na_msg_jump");
        print "Everything falls silent.^";
        System.FlushBinOrTTSIfNarrationEnabled();
        rtrue;
    ],
  has light;

Object harness "supple satin lined weapons harness"
  with
    bulky,
    name 'supple' 'satin' 'lined' 'weapons' 'harness',
    before [;
      Receive:
        if (~~(noun provides weapon)) {
          print "Your ";
          self.short_name();
          print " will only accomodate your weapons.^";
          return true;
        }
    ],
    short_name [;
      System.InlineLinkText("examine supple satin lined weapons harness", "supple satin lined weapons harness", LINKID_HARNESS);
      return true;
    ],
  has container worn clothing open custom_listing;

  Object -> truncheon "trusty truncheon"
    with
      bulky,
      weapon,
      name 'trusty' 'truncheon',
      short_name [;
        System.InlineLinkText("examine trusty truncheon", "trusty truncheon", LINKID_TRUNCHEON);
        return true;
      ];


  Object -> knife "needle pointed knife"
    with
      sharp,
      weapon,
      name 'needle' 'pointed' 'knife',
      short_name [;
        System.InlineLinkText("examine needle pointed knife", "needle pointed knife", LINKID_KNIFE);
        return true;
      ];


Object cloak "woven woolen cloak"
  with
  bulky,
  name 'woven' 'woolen' 'cloak',
  short_name [;
    System.InlineLinkText("examine woven woolen cloak", "woven woolen cloak", LINKID_CLOAK);
    return true;
  ],
  after [;
    Disrobe:
      give cloak ~general;
  ],
  has transparent worn clothing custom_listing;

  Object -> hood "hood"
    with
      name 'hood',
      description [;
        print "It's a ";
        self.short_name();
        if (cloak in player && cloak has worn && cloak has general) {
          print " pulled low over your ";
          face.short_name();
          print " obscuring your features.";
        }
        else if (cloak in player && cloak has worn && cloak hasnt general) {
          print " hanging down around your ";
          shoulders.short_name();
          print " revealing your ";
          face.short_name();
          print " to the world.";
        }
        else {
          print ".";
        }
        print "^";
      ],
      before [;
        Wear:
          if (cloak has general && cloak has worn && cloak in actor) {
            print "You are already wearing the ";
            hood.short_name();
            print ".^";
            return true;
          }
          else if (cloak has worn && cloak in actor) {
            give cloak general;
            print "You pull up the ";
            hood.short_name();
            print " around your ";
            face.short_name();
            print ", obscuring your features.^";
            return true;
          }
          else if (cloak hasnt worn) {
            "You cannot wear the ";
            hood.short_name();
            print " if you are not wearing the ";
            cloak.short_name();
            print "!^";
            return true;
          }
          else if (~~(cloak in actor)) {
            rfalse;
          }
        Disrobe:
          if (cloak hasnt general && cloak has worn && cloak in actor) {
            print "You aren't wearing the ";
            hood.short_name();
            print ".^";
            return true;
          }
          else if (cloak has worn && cloak in actor) {
            give cloak ~general;
            print "You pull down the ";
            hood.short_name();
            print " around your ";
            shoulders.short_name();
            print ", revealing your ";
            face.short_name();
            print " to the world around you.^";
            return true;
          }
          else if (cloak hasnt worn) {
            "You cannot remove the ";
            hood.short_name();
            print " if you are not wearing the ";
            cloak.short_name();
            print "!^";
            return true;
          }
          else if (~~(cloak in actor)) {
            rfalse;
          }
      ],
      short_name [;
        System.InlineLinkText("examine hood", "hood", LINKID_HOOD);
        return true;
      ],
    has scenery;

Object satchel "slim leather satchel"
  with
  name 'slim' 'leather' 'satchel',
  before [;
    Receive:
      if (noun provides bulky) {
        print "The ";
        noun.short_name();
        print " is too bulky to fit in the ";
        self.short_name();
        print "^";
        return true;
      }
      if (noun provides sharp) {
        print "The ";
        noun.short_name();
        print " would damage the ";
        self.short_name();
        print " if put in there.^";
        return true;
      }

  ],
  short_name [;
    System.InlineLinkText("examine slim leather satchel", "slim leather satchel", LINKID_SATCHEL);
    return true;
  ],
  has container openable ~open worn clothing custom_listing;

Object -> pellet "grim green poison pellet"
  with
    name 'grim' 'green' 'pellet' 'poison',
    description "Don't eat it by accident.",
    short_name [;
      System.InlineLinkText("examine grim green poison pellet", "grim green poison pellet", LINKID_PELLET);
      return true;
    ],
  has
    edible;

Object -> card "laminated parchment card"
  with
    name 'laminated' 'parchment' 'card',
    description "It's a license to lie.",
    short_name [;
      System.InlineLinkText("examine laminated parchment card", "laminated parchment card", LINKID_CARD);
      return true;
    ];

Object -> charge "peril powder charge"
  with
    name 'peril' 'powder' 'charge',
    description "Explosive.",
    short_name [;
      System.InlineLinkText("examine peril powder charge", "peril powder charge", LINKID_CHARGE);
      return true;
    ];

Object -> vial "glaes faeflask"
  class  VesselClass DelicateClass
  with
    specialSeal,
    name 'glaes' 'faeflask' 'flask',
    description "Smooth and dark.",
    short_name [;
      if (action ~= ##Open || noun ~= self) {
        if (self has open) {
          print "unsealed ";
        }
        else {
          print "sealed ";
        }
      }
      System.InlineLinkText("examine glaes faeflask", "glaes faeflask", LINKID_FAEFLASK);
      rtrue;
    ],
  has
    ~open openable;

Object -> -> dose "dose of dire devotion"
  class LiquidClass
  with
    short_name "cherry red dose of dire devotion",
    article "a",
    name 'cherry' 'red' 'dose' 'dire' 'devotion';

Object shoulders "shoulders"
  with
    name 'shoulders' 'shoulder',
    description "Broad and strong.  The Order trains you well.",
    parse_name [ w1 w2;
      w1 = NextWord(); w2 = NextWord();
      if(w1 == 'left' && w2 == 'shoulder') return 2;
      if(w1 == 'right' && w2 == 'shoulder') return 2;
      if(w1 == 'shoulder' && w2 == 0) return 1;
      if(w1 == 'shoulders' && w2 == 0) return 1;
    ],
    short_name [;
      System.InlineLinkText("examine my shoulders", "shoulders", LINKID_SHOULDERS);
      return true;
    ];

Object face "face"
  with
    name 'face',
    description "A smooth and unlined forehead crowns eyes of unquenchable fire.  Or so you've been told.",
    short_name [;
      System.InlineLinkText("examine my face", "face", LINKID_FACE);
      return true;
    ];

Object body "body"
  with
    name 'body',
    description "Slim, trim and covered in horrific scars that never cease to writhe and itch.",
    short_name [;
      System.InlineLinkText("examine my body", "body", LINKID_BODY);
      return true;
    ];

Object back "back"
  with
    name 'back',
    description "Still aching from this morning's grueling training session.",
    short_name [;
      System.InlineLinkText("examine my back", "back", LINKID_BACK);
      return true;
    ];

Object room "Cell"
  with
    description [;
      QueueBinOutput("na_desc_cell");
      QueueBinOutput("0_25_silence");

      "You are standing in a cell.  The only way out is down.";
    ],
    before [;
      Go:
        if (noun == d_obj) {
          if (System.audioEnabled) {
            VorpleExecuteJavaScriptCommand("PlayNowAsList('na_msg_game_over');");
          }
          print "Indeed, for you will not go gently into that good night.  Game over, for now.";
          KeyCharPrimitive();
          quit;
        }
    ],
  has light;

Object -> pistol "strange pistol"
  with
    name 'strange' 'pistol',
    articles "=na_name_the_pistol;The " "=na_name_the_pistol;the " "=na_name_a_pistol;a ",
    short_name "strange pistol",
    description [;
      QueueBinOutput("na_desc_pistol");
      "There's no trigger.  You can't tell how to fire it.";
    ],
  has clothing;
